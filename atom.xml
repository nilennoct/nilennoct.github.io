<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Nil-Enn-Oct]]></title>
  <subtitle><![CDATA[Record my life.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.nilennoct.com/"/>
  <updated>2014-08-17T18:32:24.120Z</updated>
  <id>http://www.nilennoct.com/</id>
  
  <author>
    <name><![CDATA[nilennoct]]></name>
    <email><![CDATA[hfdjf007(a)163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[让百度统计支持 PJAX]]></title>
    <link href="http://www.nilennoct.com//baidu-analytics-with-pjax/"/>
    <id>http://www.nilennoct.com//baidu-analytics-with-pjax/</id>
    <published>2014-08-17T07:07:51.000Z</published>
    <updated>2014-08-17T09:09:14.000Z</updated>
    <content type="html"><![CDATA[<p>最近把博客系统迁移到 Hexo 上了，作为一名前端工(zha)程(ma)师(nong)，不得不说 Hexo 的相性更好些。</p>
<p>重新做了套新皮肤，简单的做了下对 iPhone 访问的优化，同时使用了已不新鲜的 PJAX 技术。不过发现百度统计还没支持 PJAX，只能记录第一次打开的页面。没办法只能拿统计代码开刀了。</p>
<p>我使用的是百度统计的异步加载模式，整个过程分三步：执行插入页面的异步代码；执行异步加载的<code>hm.js</code>；GET 方式请求<code>hm.gif</code>传递统计信息。后两步肯定是没法改了，那就看看百度统计的异步代码吧。</p>
<figure class="highlight html"><figcaption><span>百度统计的异步代码</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> _hmt = _hmt || [];</div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">  hm.src = <span class="string">"//hm.baidu.com/hm.js?/* id here */"</span>;</div><div class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</div><div class="line">  s.parentNode.insertBefore(hm, s);</div><div class="line">})();</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>好吧突然发现这代码和两年前的一模一样，真稳定= =。代码很简单，新建一个<code>&lt;script&gt;</code>元素，设置<code>src</code>然后插到页面中第一个<code>&lt;script&gt;</code>元素前，剩下的就是<code>hm.js</code>的事了。因此要完成统计工作，实际上只要在每次通过 PJAX 加载后重新加载<code>hm.js</code>就好了。</p>
<figure class="highlight html"><figcaption><span>修改后的代码</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">id</span>=<span class="value">"bd-hm"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> _hmt = _hmt || [];</div><div class="line">    (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">        hm.src = <span class="string">"//hm.baidu.com/hm.js?/* id here */"</span>;</div><div class="line">        hm.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            <span class="comment">// 清除百度统计的加载标识</span></div><div class="line">            <span class="keyword">delete</span> <span class="built_in">window</span>[<span class="string">"_bdhm_loaded_/* id here */"</span>];</div><div class="line">        };</div><div class="line">        <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementById(<span class="string">'bd-hm'</span>);</div><div class="line">        s.parentNode.insertBefore(hm, s);</div><div class="line">    })();</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>然后在 layout 模板中把这段代码从<code>&lt;/head&gt;</code>前移到合适的位置，在这套主题中，PJAX 请求完替换的是<code>div#main</code>的内容，因此放到它的<code>&lt;/div&gt;</code>前。给<code>&lt;script&gt;</code>加<code>id=&quot;bd-hm&quot;</code>是为了定位统计代码，总不能每次都还是像之前那样插到<code>&lt;head&gt;</code>里吧？你要不介意我也没话说= =。</p>
]]></content>
    
    
      <category term="Javascript" scheme="http://www.nilennoct.com/tags/Javascript/"/>
    
      <category term="Blog" scheme="http://www.nilennoct.com/tags/Blog/"/>
    
      <category term="Note" scheme="http://www.nilennoct.com/categories/Note/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS 使用体验]]></title>
    <link href="http://www.nilennoct.com//angularjs-first-experience/"/>
    <id>http://www.nilennoct.com//angularjs-first-experience/</id>
    <published>2014-07-10T02:52:57.000Z</published>
    <updated>2014-08-03T13:54:35.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>AngularJS是一款开源 JavaScript函式库，由Google维护，用来协助单一页面应用程式运行的。它的目标是透过MVC模式 (MVC) 功能增强基于浏览器的应用，使开发和测试变得更加容易。</p>
<p><strong>Angular的哲学</strong></p>
<p>AngularJS是建立在这样的信念上的：即声明式编程应该用于构建用户界面以及编写软件构建，而指令式编程非常适合来表示业务逻辑。框架采用并扩展了传统HTML，通过双向的数据绑定来适应动态内容，双向的数据绑定允许模型和视图之间的自动同步。因此，AngularJS使得对DOM的操作不再重要并提升了可测试性。</p>
<p>See more from <a href="http://en.wikipedia.org/wiki/AngularJS" target="_blank" rel="external">Wikipedia</a></p>
</blockquote>
<p>以上内容引自维基百科，简单的来说，AngularJS 就是一个使用了 MVC 设计模式的 Javascript 框架，类似的还有 Backbone.js、Atoms.js 等。因为之前也稍有接触 Backbone.js，所以先简单说说 AngularJS 和 Backbone.js 之间的区别。若与实际有出入，欢迎斧正。</p>
<a id="more"></a>

<h2 id="与_Backbone-js_的比较">与 Backbone.js 的比较</h2>
<ul>
<li><strong>依赖关系 (Dependency)</strong></li>
</ul>
<p><a href="http://backbonejs.org/" target="_blank" rel="external">Backbone.js</a> 依赖于 <a href="http://underscorejs.org/" target="_blank" rel="external">Underscore.js</a>，DOM 操作、RESTful、history 支持等则依赖于 <a href="http://jquery.com/" target="_blank" rel="external">jQuery</a> 或 <a href="http://zeptojs.com/" target="_blank" rel="external">Zepto</a>，因此虽然 Backbone.js 自身体积不大，但合计起来体积也不小；<a href="http://www.angularjs.org/" target="_blank" rel="external">AngulaJS</a> 不依赖于其他 Javascript 库，对于 DOM 操作，AngularJS 自带一个 jQuery 的子集（称作 jQuery lite 或 jqLite），可以使用 <code>angular.element</code> 完成大多数的 DOM 操作。当用户在 AngularJS 之前导入 jQuery 时，AngularJS 会自动使用 jQuery，此时 <code>angular.element</code> 就变成了 <code>jQuery</code> 的一个别名。</p>
<ul>
<li><strong>模板 (Template/View)</strong></li>
</ul>
<p>Backbone.js 默认使用 Underscore.js 提供的模板引擎 (string-based)，也可以自己导入其他的模板引擎；AngularJS 自带了一个强大的 DOM 转换引擎而非 Underscore.js 那样的基于字符串的模板引擎，大大提高了执行效率，而且因为 AngularJS 是在 HTML 的基础上进行扩展，相对更容易理解。</p>
<blockquote>
<p>Angular’s HTML compiler allows the developer to teach the browser new HTML syntax. The compiler allows you to attach behavior to any HTML element or attribute and even create new HTML elements or attributes with custom behavior. Angular calls these behavior extensions directives.</p>
<p>Angular comes pre-bundled with common directives which are useful for building any app. We also expect that you will create directives that are specific to your app. These extensions become a Domain Specific Language for building your application.</p>
</blockquote>
<ul>
<li><strong>模型 (Model)</strong></li>
</ul>
<p>Backbone.js 提供了 Backbone.Model 和 Backbone.Collection，Collection 是一类 Model 的集合，提供了增删查改以及查询等一系列方法。借由 Backbone.sync，Model 和 Collection 都可以很方便地实现 REST 从而与后端交换数据，但是对于非 RESTful 的后端 Backbone.js 就显得不那么友好了，用户需要重载 Backbone.sync 或是直接使用 jQuery。</p>
<p>AngularJS 没有封装 Collection 或是 Model，对于 AngularJS 一个 Object 就是一个 Model，因此没有 Backbone.js 那样嵌套的问题，但也因此需要自行维护 Model。不过如果确实有需要的话，这个问题可以通过导入相应的模块解决。</p>
<ul>
<li><strong>数据绑定 (Data-binding)</strong></li>
</ul>
<p>Backbone.js 并没有提供数据绑定的方法，用户需要手动在 Model 和 View 之间建立关系，比如 <code>this.model.on(&#39;eventName&#39;, callback)</code> 或者 <code>this.listenTo(this.model, &#39;eventName&#39;, callback)</code>，这里的 <code>this</code> 指向 View 的一个实例。（个人不建议在 Model 的定义中绑定与 View 操作有关的事件）。</p>
<p>下面是一个例子。有一个图像列表，结构如下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- image content --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- image content --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div></pre></td></tr></table></figure>

<p>ImageView 是图像列表中每张图片的 View，代码如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> imageTpl = <span class="string">'&lt;a class="imgWrapper" href="javascript:void(0);"&gt;\</span></div><div class="line">    &lt;% var url = "/files/thumbnail/" + image.filename; %&gt;\</div><div class="line">        &lt;img src="&lt;%=url%&gt;" alt="&lt;%=image.title%&gt;" data-src="/files/&lt;%=image.filename%&gt;" /&gt;\</div><div class="line">    &lt;/a&gt;\</div><div class="line">    &lt;div class="imgInfo"&gt;\</div><div class="line">        &lt;input type="text" name="title" id="title" value="&lt;%=image.title%&gt;" placeholder="Title" /&gt;\</div><div class="line">        &lt;div&gt;&lt;%=image.date%&gt;&lt;/div&gt;\</div><div class="line">        &lt;input type="text" name="tags" id="tags" value="&lt;%=image.tags.join(" ")%&gt;" placeholder="Tags(separate with space)" /&gt;\</div><div class="line">    &lt;/div&gt;\</div><div class="line">    &lt;div class="imgControl"&gt;\</div><div class="line">        &lt;a class="button submit icon-checkmark" href="javascript:void(0)"&gt;Submit&lt;/a&gt;\</div><div class="line">    &lt;/div&gt;';</div><div class="line"></div><div class="line"><span class="keyword">var</span> ImageView = Backbone.View.extend({</div><div class="line">    tagName: <span class="string">'li'</span>,</div><div class="line">    render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">this</span>.$el.html(_.template(imageTpl, {image: <span class="keyword">this</span>.model.toJSON()})).attr(<span class="string">'id'</span>, <span class="keyword">this</span>.model.id);</div><div class="line">        <span class="keyword">this</span>.$title = <span class="keyword">this</span>.$(<span class="string">'input#title'</span>);</div><div class="line">        <span class="keyword">this</span>.$tags = <span class="keyword">this</span>.$(<span class="string">'input#tags'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    },</div><div class="line">    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">this</span>.listenTo(<span class="keyword">this</span>.model, <span class="string">'destroy'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">            <span class="keyword">this</span>.remove();</div><div class="line">        });</div><div class="line">    },</div><div class="line">    events: {</div><div class="line">        <span class="string">'click .submit'</span>: <span class="string">'submit'</span></div><div class="line">    },</div><div class="line">    submit: <span class="function"><span class="keyword">function</span> <span class="title">submit</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).hasClass(<span class="string">'disabled'</span>)) {</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">this</span>.model.set({</div><div class="line">            title: <span class="keyword">this</span>.$(<span class="string">'#title'</span>).val(),</div><div class="line">            tags: <span class="keyword">this</span>.$(<span class="string">'#tags'</span>).val().trim().split(<span class="string">' '</span>)</div><div class="line">        });</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>AngularJS 为人称道的一点就是它的双向数据绑定，先看一下来自 AngularJS 官方的介绍：</p>
<blockquote>
<p>Angular templates work differently. First the template (which is the uncompiled HTML along with any additional markup or directives) is compiled on the browser. The compilation step produces a live view. Any changes to the view are immediately reflected in the model, and any changes in the model are propagated to the view. The model is the single-source-of-truth for the application state, greatly simplifying the programming model for the developer. You can think of the view as simply an instant projection of your model.</p>
</blockquote>
<p>如果是 AngularJS，上面那段代码要怎么写？请看下面的代码。</p>
<figure class="highlight html"><figcaption><span>view.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">ng-controller</span>=<span class="value">"ImageListCtrl"</span> <span class="attribute">ng-repeat</span>=<span class="value">"image in images"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"imgWrapper"</span> <span class="attribute">href</span>=<span class="value">"javascript:void(0);"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- AngularJS 的模板语法是两个”{}“包住变量名，这里中间插入了空格是因为 Jekyll 也用了相同的模板语法，下同。 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">img</span> <span class="attribute">ng-src</span>=<span class="value">"{ { image.url } }"</span> <span class="attribute">alt</span>=<span class="value">"{ { image.title } }"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"imgInfo"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">ng-model</span>=<span class="value">"image.title"</span> <span class="attribute">name</span>=<span class="value">"title"</span> <span class="attribute">id</span>=<span class="value">"title"</span> <span class="attribute">placeholder</span>=<span class="value">"Title"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-bind</span>=<span class="value">"image.date"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">ng-model</span>=<span class="value">"image.tags"</span> <span class="attribute">ng-list</span>=<span class="value">" "</span> <span class="attribute">name</span>=<span class="value">"tags"</span> <span class="attribute">id</span>=<span class="value">"tags"</span> <span class="attribute">placeholder</span>=<span class="value">"Tags(separate with space)"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"imgControl"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">class</span>=<span class="value">"button submit icon-checkmark"</span> <span class="attribute">ng-class</span>=<span class="value">"{disabled: image.disabled}"</span> <span class="attribute">ng-click</span>=<span class="value">"submit($index)"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></div></pre></td></tr></table></figure>



<figure class="highlight javascript"><figcaption><span>controller.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'imgboxController'</span>).controller(<span class="string">'ImageListCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, $http)</span> </span>{</div><div class="line">    $http.get(<span class="string">'/images/'</span>).success(<span class="function"><span class="keyword">function</span><span class="params">(images)</span> </span>{</div><div class="line">        $scope.images = images;</div><div class="line">    });</div><div class="line">    </div><div class="line">    $scope.submit = <span class="function"><span class="keyword">function</span> <span class="title">submit</span><span class="params">($index)</span> </span>{</div><div class="line">        <span class="keyword">var</span> image = $scope.images[$index];</div><div class="line">        <span class="keyword">if</span> (image.disabled) <span class="keyword">return</span>;</div><div class="line">        image.disabled = <span class="literal">true</span>;</div><div class="line">        $http.put(<span class="string">'/images/'</span> + image._id, image).success(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            image.disabled = <span class="literal">false</span>;</div><div class="line">        });</div><div class="line">    }</div><div class="line">}]);</div></pre></td></tr></table></figure>

<p>很明显可以看出两种方法的区别，第一种仅仅是 View 的定义，内容包括了模板内容和渲染方法、记录 DOM 元素、事件绑定等，要生成一个完整的图像列表还有很多代码要写，比如索取所有图像信息、控制循环生成列表等；第二种使用了 AngularJS 的则包含了 Model、View、Controller 的定义，实现了第一种方法中的所有功能，甚至包括第一种方法尚未实现的功能。借助于双向数据绑定，用户不需要关心该如何操作 DOM 元素，只需要关心 Controller 的编写和 Model 的管理，大大提高了效率。</p>
<p>说了怎么多，感觉好像都是 AngularJS 更具有优势。但实际上 AngularJS 有一个不能忽视的问题，就是相比 Backbone.js，AngularJS 的门槛更高，需要花更多时间学习相关的知识。使用 Backbone.js 的话，可能只要花比较少的时间看看文档和例子就能快速上手开发，遇到文档中没说明清楚的问题时，直接看源码往往可以很快解决；相比之下，AngularJS 就没有这么简单了，首先要了解各种 Directive 的作用和用法，弄清 Service、Factory、Provider、Dependency Injection 等概念。虽然也可以像使用其他类库那样一边写代码一边看文档，但我觉得还是先系统地看一遍更好，不然随着学习的深入，你会发现很多之前写的代码都可以用更好的方法去实现，以至于每隔一段时间可能就要重构一次代码了。</p>
<h2 id="一些使用心得">一些使用心得</h2>
<ul>
<li><p><strong>常用的 Directive</strong></p>
<ul>
<li><code>ngController</code>：用于指定此 DOM 树的 Controller，同时也确定了 <code>$scope</code> 的作用范围。</li>
<li><code>ngModel</code>：用于给 <code>input</code>、<code>textarea</code> 或 <code>select</code> 绑定 Model，Model 的值会根据用户的输入自动更新，即 View -&gt; Model 的更新。</li>
<li><code>ngBind</code>：用于设置 DOM 的内容，相当于设置 innerText。以之前的代码为例，<code>&lt;div&gt;{ { image.date } }&lt;/div&gt;</code> 也可以写作 <code>&lt;div ng-bind=&quot;image.date&quot;&gt;&lt;/div&gt;</code>，通常会选择用 ngBind 设置 DOM 的内容以避免在模板渲染完成前显示类似 <code>{ { image.date } }</code> 的内容。</li>
<li><code>ngSrc/ngHref</code>：用于设置含变量的图片地址/链接地址，若直接使用 HTML 的 src/href 属性会触发无效的 HTTP 请求。</li>
<li><code>ngRepeat</code>：非常实用的一个 Directive，通常用于渲染数组或对象。此外在 <code>ngRepeat</code> 上还可以应用 Filter 筛选出符合条件的 Model。</li>
<li><code>ngClass</code>：用于动态设置 DOM 的 Class。</li>
<li><code>ngClick/ngKeypress/...</code>：这是一系列的 Directive，形式类似于 <code>ngEvent</code> ，接受一个表达式作参数，可以是 <code>$scope</code> 上的一个函数，如 <code>ng-click=&quot;submit($index)&quot;</code>，也可以是对 <code>$scope</code> 域中变量的修改，如 <code>ng-click=&quot;image.disabled = true&quot;</code>。</li>
<li><code>ngShow/ngHide</code>：用于动态显示/隐藏 DOM。</li>
</ul>
</li>
<li><p><strong>Controller 的继承</strong></p>
</li>
</ul>
<p>很多时候我们会需要用到 Controller 的继承，比如有 <code>PersonCtrl</code>、<code>StaffCtrl</code>、<code>ManagerCtrl</code> 三个 Controller，<code>StaffCtrl</code> 和 <code>ManagerCtrl</code> 都会用到 <code>PersonCtrl</code> 的一些公共函数。此时可以这样写：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"PersonCtrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">ng-controller</span>=<span class="value">"StaffCtrl"</span>&gt;</span><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">ng-controller</span>=<span class="value">"ManagerCtrl"</span>&gt;</span><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p>这样通过 <code>StaffCtrl</code> 和 <code>ManagerCtrl</code> 的 <code>$scope</code> 就可以访问到 <code>PersonCtrl</code> 的 <code>$scope</code> 上的变量和函数，而 <code>PersonCtrl</code> 中直接以 <code>function foo() {...}</code> 或 <code>var a</code> 形式定义的将保持私有。</p>
<ul>
<li><strong>FIre the listeners</strong></li>
</ul>
<p>在某些特殊的情况下我们可能会发现 Model 的更新没有实时反映到 View 上。比如下面这两段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo1 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        $scope.messages.pop();</div><div class="line">    }, <span class="number">3000</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo2 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        $scope.$apply(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            $scope.messages.pop();</div><div class="line">        });</div><div class="line">    }, <span class="number">3000</span>);    </div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">ng-repeat</span>=<span class="value">"message in messages"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"alert"</span> <span class="attribute">ng-bind</span>=<span class="value">"message.content"</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div></pre></td></tr></table></figure>

<p>假设原来 <code>$scope.message</code> 中有3条消息，执行 <code>foo1()</code> 后理论上 View 中显示的消息数目将变成 2，但实际上并非如此。这种情况并不少见，比如使用 setTimeout、XHR 或一些第三方库时，往往都会出现类似的问题。此时就需要用到 <code>Scope.$apply()</code> 了，即上例中的 <code>foo2()</code> 函数。</p>
<blockquote>
<p><code>$apply()</code> is used to execute an expression in angular from outside of the angular framework. (For example from browser DOM events, setTimeout, XHR or third party libraries). Because we are calling into the angular framework we need to perform proper scope life cycle of exception handling, executing watches.</p>
</blockquote>
<ul>
<li><strong>简单谈谈 AngularJS 的 HTML Compiler</strong></li>
</ul>
<p>如前文所说，AngularJS 自带了一个强大的 DOM 转换引擎而非 Underscore.js 那样的基于字符串的模板引擎，通过 <code>Compiler</code> service 完成模板的生成。整个过程有两个阶段：</p>
<ul>
<li>Compile：遍历 DOM 并收集所有 directives，并返回 linking 函数；</li>
<li>Link：整合 directives 和相应的 scope 以生成视图 (View)，实际上就是在 DOM 上添加 listener 和在 scope 上添加 <code>$watcher</code>。</li>
</ul>
<p>可以看看官方给出的伪代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $compile = ...; <span class="comment">// injected into your code</span></div><div class="line"><span class="keyword">var</span> scope = ...;</div><div class="line"><span class="keyword">var</span> parent = ...; <span class="comment">// DOM element where the compiled template can be appended</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> html = <span class="string">'&lt;div ng-bind="exp"&gt;&lt;/div&gt;'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Step 1: parse HTML into DOM element</span></div><div class="line"><span class="keyword">var</span> template = angular.element(html);</div><div class="line"></div><div class="line"><span class="comment">// Step 2: compile the template</span></div><div class="line"><span class="keyword">var</span> linkFn = $compile(template);</div><div class="line"></div><div class="line"><span class="comment">// Step 3: link the compiled template with the scope.</span></div><div class="line"><span class="keyword">var</span> element = linkFn(scope);</div><div class="line"></div><div class="line"><span class="comment">// Step 4: Append to DOM (optional)</span></div><div class="line">parent.appendChild(element);</div></pre></td></tr></table></figure>


<ul>
<li><strong>Module 的获取</strong></li>
</ul>
<p>AngularJS 是模块化设计的，用户可按需要创建、导入模块，这使得 AngularJS 变得十分灵活。AngularJS 的模块化是通过依赖注入 (Dependency Injection) 实现的，AngularJS 通过 injector 创建和查找所需要的 Module。</p>
<p>当获取 Module 时，injector 会在 Instance Cache 中查找需要的 Module 是否存在，若存在则直接返回（单例模式），若不存在则通过 Instance Factory 创建一个新的，放入 Instance Cache 后返回。 AngularJS 允许创建同名的 Module，但是新创建的 Module 会覆盖旧的 Module。</p>
<p>To be continued.</p>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>AngularJS是一款开源 JavaScript函式库，由Google维护，用来协助单一页面应用程式运行的。它的目标是透过MVC模式 (MVC) 功能增强基于浏览器的应用，使开发和测试变得更加容易。</p>
<p><strong>Angular的哲学</strong></p>
<p>AngularJS是建立在这样的信念上的：即声明式编程应该用于构建用户界面以及编写软件构建，而指令式编程非常适合来表示业务逻辑。框架采用并扩展了传统HTML，通过双向的数据绑定来适应动态内容，双向的数据绑定允许模型和视图之间的自动同步。因此，AngularJS使得对DOM的操作不再重要并提升了可测试性。</p>
<p>See more from <a href="http://en.wikipedia.org/wiki/AngularJS" target="_blank" rel="external">Wikipedia</a></p>
</blockquote>
<p>以上内容引自维基百科，简单的来说，AngularJS 就是一个使用了 MVC 设计模式的 Javascript 框架，类似的还有 Backbone.js、Atoms.js 等。因为之前也稍有接触 Backbone.js，所以先简单说说 AngularJS 和 Backbone.js 之间的区别。若与实际有出入，欢迎斧正。</p>
]]></summary>
    
      <category term="Javascript" scheme="http://www.nilennoct.com/tags/Javascript/"/>
    
      <category term="Note" scheme="http://www.nilennoct.com/categories/Note/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决 OpenShift 部署 node 应用不能自动重启]]></title>
    <link href="http://www.nilennoct.com//npm-install-error-on-openshift/"/>
    <id>http://www.nilennoct.com//npm-install-error-on-openshift/</id>
    <published>2014-06-05T02:42:34.000Z</published>
    <updated>2014-08-03T16:52:16.000Z</updated>
    <content type="html"><![CDATA[<p>最近在做一个 node.js  的小项目，用来管理 blog 中使用的图片，部署在 openshift 上，但是一直有一个奇怪的问题，就是每次用 git push 完代码以后，应用都是一直处于 building 状态而不会自动重启。查看日志以后发现是 npm 在安装 package 的时候找不到有效的版本：</p>
<blockquote>
<p>remote: npm ERR! Error: No compatible version found: body-parser@’^1.2.0’</p>
</blockquote>
<p>但在给出的 Valid install targets 中却明明包含了 <code>body-parser 1.2.0</code>。因为这个问题，每次部署完都得手动重启应用，实在是让人觉得有些麻烦。</p>
<p>既然本地运行没有问题，说明应该是服务器的 npm 或 node.js 的版本问题。可以在本地安装好所需要的 package 后，使用 <code>npm shrinkwrap</code> 锁定已安装的 package 的版本，此次目录下会生成一个 <code>npm-shrinkwrap.json</code> 文件，重新 push 到服务器部署就不会再出现原来的问题了。只是这样 package 的安装、更新等管理工作就需要放在本地了。</p>
<blockquote>
<p><strong>npm shrinkwrap</strong></p>
<p>This command locks down the versions of a package’s dependencies so that you can control exactly which versions of each dependency will be used when your package is installed. The “package.json” file is still required if you want to use “npm install”.</p>
<p><a href="https://www.npmjs.org/doc/cli/npm-shrinkwrap.html" target="_blank" rel="external">More about npm shrinkwrap</a></p>
</blockquote>
]]></content>
    
    
      <category term="Note" scheme="http://www.nilennoct.com/categories/Note/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript中的CRC32()修正]]></title>
    <link href="http://www.nilennoct.com//javascript-crc32-fix/"/>
    <id>http://www.nilennoct.com//javascript-crc32-fix/</id>
    <published>2014-03-10T08:53:00.000Z</published>
    <updated>2014-08-03T14:08:12.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>循环冗余校验（英语：Cyclic redundancy check，通称“CRC”）是一种根据网络数据数据包或计算机文件等数据产生简短固定位数校验码的一种散列函數，主要用来检测或校验数据传输或者保存后可能出现的错误。生成的数字在传输或者存储之前计算出来并且附加到数据后面，然后接收方进行检验确定数据是否发生变化。一般来说，循环冗余校验的值都是32位的整数。由于本函数易于用二进制的计算机硬件使用、容易进行数学分析并且尤其善于检测传输通道干扰引起的错误，因此获得广泛应用。它是由W. Wesley Peterson在他1961年发表的论文中披露<a href="http://dx.doi.org/10.1109%2FJRPROC.1961.287814" target="_blank" rel="external">[1]</a>。</p>
<p>详见 <a href="http://zh.wikipedia.org/zh-cn/循環冗餘校驗" target="_blank" rel="external">wiki 循环冗余校验</a>。</p>
</blockquote>
<p>最近在做一个项目时需要用到CRC32做URL的Hash，因为JavaScript自身并没有实现CRC32，所以我使用了php.js中的解决方案。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">crc32</span><span class="params">(str)</span> </span>{</div><div class="line">	<span class="comment">// discuss at: http://phpjs.org/functions/crc32/</span></div><div class="line">	<span class="comment">// original by: Webtoolkit.info (http://www.webtoolkit.info/)</span></div><div class="line">	<span class="comment">// improved by: T0bsn</span></div><div class="line">	<span class="comment">// depends on: utf8_encode</span></div><div class="line">	<span class="comment">// example 1: crc32('Kevin van Zonneveld');</span></div><div class="line">	<span class="comment">// returns 1: 1249991249</span></div><div class="line"></div><div class="line">	str = <span class="keyword">this</span>.utf8_encode(str);</div><div class="line">	<span class="keyword">var</span> table =</div><div class="line">		<span class="string">'00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D'</span>;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> crc = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> y = <span class="number">0</span>;</div><div class="line"></div><div class="line">	crc = crc ^ (-<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, iTop = str.length; i &lt; iTop; i++) {</div><div class="line">		y = (crc ^ str.charCodeAt(i)) & <span class="number">0xFF</span>;</div><div class="line">		x = <span class="string">'0x'</span> + table.substr(y * <span class="number">9</span>, <span class="number">8</span>);</div><div class="line">		crc = (crc &gt;&gt;&gt; <span class="number">8</span>) ^ x;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">return</span> crc ^ (-<span class="number">1</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然而在实际运用中，我发现经常出现与PHP中的<code>crc32()</code>函数计算出的结果匹配不了的情况。经检查是这个Javascript版的<code>crc32()</code>在某些情况下会得出负值。比如计算<code>crc32(&quot;usercard_show.php&quot;);</code>，用PHP得到的结果是<code>3345955374</code>，而JavaScript得到的是<code>-949011922</code>。如果单纯的适用JavaScript生成、检验CRC值当然没问题，但若与PHP联系起来就会出现很大的问题。</p>
<p>看了代码实现，不难猜出问题出在有符号数和无符号数上。JavaScript采用IEEE 754标准定义的64位浮点格式表示数字，因此它的数字都是有符号的。在运算过程中虽然都使用了<code>&gt;&gt;&gt;</code>(Zero-fill right shift)，但是在最后返回结果的时候没有将有符号数转化为无符号数，因此出现了负数的情况。</p>
<p>解决方法很简单，只需要修改最后一行就好了，如下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">crc32</span><span class="params">(str)</span> </span>{</div><div class="line">	<span class="comment">/* …… */</span></div><div class="line">	crc = crc ^ (-<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, iTop = str.length; i &lt; iTop; i++) {</div><div class="line">		y = (crc ^ str.charCodeAt(i)) & <span class="number">0xFF</span>;</div><div class="line">		x = <span class="string">'0x'</span> + table.substr(y * <span class="number">9</span>, <span class="number">8</span>);</div><div class="line">		crc = (crc &gt;&gt;&gt; <span class="number">8</span>) ^ x;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">return</span> (crc ^ (-<span class="number">1</span>)) &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="Javascript" scheme="http://www.nilennoct.com/tags/Javascript/"/>
    
      <category term="Note" scheme="http://www.nilennoct.com/categories/Note/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在IntelliJ Idea中使用SWT]]></title>
    <link href="http://www.nilennoct.com//use-swt-in-intellij-idea/"/>
    <id>http://www.nilennoct.com//use-swt-in-intellij-idea/</id>
    <published>2013-07-16T06:22:00.000Z</published>
    <updated>2014-03-30T12:22:05.000Z</updated>
    <content type="html"><![CDATA[<p>首先下载<a href="http://www.eclipse.org/swt/" target="_blank" rel="external">SWT</a>,得到一个ZIP包，解压到IntelliJ Idea的Workspace目录。</p>
<p>打开IntelliJ Idea，选择<code>File</code>-&gt;<code>Other Settings</code>-&gt;<code>Default Project Structure</code>，在<code>Global Libraries</code>中点击加号，选择刚才解压出来的SWT的路径，设置好名字后点<code>OK</code>保存。如下图所示。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/07/Default-Project-Structure.png" alt="Default Project Structure"><br><a id="more"></a><br>新建一个工程，选择<code>File</code>-&gt;<code>Project Structure</code>，在<code>Modules</code>选项卡的<code>Dependencies</code>中点击加号添加<code>Library</code>，选择<code>Global Libraries</code>中刚刚添加的<code>org.eclipse.swt</code>。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/07/Project-Structure.png" alt="Project Structure"></p>
<p>现在来新建一个Java文件看看效果吧：</p>
<figure class="highlight java"><figcaption><span>SwtTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.eclipse.swt.SWT;</div><div class="line"><span class="keyword">import</span> org.eclipse.swt.events.PaintEvent;</div><div class="line"><span class="keyword">import</span> org.eclipse.swt.events.PaintListener;</div><div class="line"><span class="keyword">import</span> org.eclipse.swt.graphics.Rectangle;</div><div class="line"><span class="keyword">import</span> org.eclipse.swt.widgets.Canvas;</div><div class="line"><span class="keyword">import</span> org.eclipse.swt.widgets.Display;</div><div class="line"><span class="keyword">import</span> org.eclipse.swt.widgets.Shell;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwtTest</span> </span>{</div><div class="line">	<span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span>(String args[]) {</div><div class="line">		Display display = <span class="keyword">new</span> Display();</div><div class="line">		<span class="keyword">final</span> Shell shell = <span class="keyword">new</span> Shell(display);</div><div class="line"></div><div class="line">		Canvas canvas = <span class="keyword">new</span> Canvas(shell, SWT.NONE);</div><div class="line">		canvas.setSize(<span class="number">400</span>, <span class="number">300</span>);</div><div class="line">		canvas.addPaintListener(<span class="keyword">new</span> PaintListener() {</div><div class="line">			<span class="annotation">@Override</span></div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintControl</span>(PaintEvent e) {</div><div class="line">				Rectangle clientArea = shell.getClientArea();</div><div class="line">				e.gc.drawLine(<span class="number">0</span>, <span class="number">0</span>, clientArea.width, clientArea.height);</div><div class="line">				e.gc.drawLine(clientArea.width, <span class="number">0</span>, <span class="number">0</span>, clientArea.height);</div><div class="line">			}</div><div class="line">		});</div><div class="line"></div><div class="line">		shell.setText(<span class="string">"SwtTest"</span>);</div><div class="line">		shell.pack();</div><div class="line">		shell.open();</div><div class="line"></div><div class="line">		<span class="keyword">while</span> ( ! shell.isDisposed()) {</div><div class="line">			<span class="keyword">if</span> ( ! display.readAndDispatch()) {</div><div class="line">				display.sleep();</div><div class="line">			}</div><div class="line">		}</div><div class="line">		display.dispose();</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>运行结果如下图：</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/07/SwtTest.png" alt="SwtTest"></p>
<p>以后需要在工程中使用SWT时，只要做第三步就可以了，也还是挺方便的。</p>
]]></content>
    <summary type="html"><![CDATA[<p>首先下载<a href="http://www.eclipse.org/swt/" target="_blank" rel="external">SWT</a>,得到一个ZIP包，解压到IntelliJ Idea的Workspace目录。</p>
<p>打开IntelliJ Idea，选择<code>File</code>-&gt;<code>Other Settings</code>-&gt;<code>Default Project Structure</code>，在<code>Global Libraries</code>中点击加号，选择刚才解压出来的SWT的路径，设置好名字后点<code>OK</code>保存。如下图所示。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/07/Default-Project-Structure.png" alt="Default Project Structure"><br>]]></summary>
    
      <category term="Note" scheme="http://www.nilennoct.com/categories/Note/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Raspberry Pi制作简单的轮盘游戏机]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-roulette-game-gpio/"/>
    <id>http://www.nilennoct.com//raspberrypi-roulette-game-gpio/</id>
    <published>2013-06-10T11:50:00.000Z</published>
    <updated>2014-08-17T05:09:15.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p>之前在Raspberry Pi上做了许多好玩的事情，但与物理计算却是一点关系也没有。所以这次我们来尝试用RPi做一个简单的轮盘游戏机。因为材料有限，“轮盘”将使用一个2位8段数码管模拟。</p>
<p>材料准备：</p>
<ul>
<li>Raspberry Pi</li>
<li>面包板一块</li>
<li>2位8段数码管一个</li>
<li>按钮2个</li>
<li>1K~10KΩ电阻2个</li>
<li>面包线+杜邦线若干</li>
</ul>
<p><strong>在RPi上安装wiringPi</strong></p>
<p>使用串口或SSH连接RPi，输入以下命令安装wiringPi。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /tmp/</div><div class="line">$ git clone git://git.drogon.net/wiringPi</div><div class="line">$ <span class="built_in">cd</span> wiringPi</div><div class="line">$ <span class="built_in">sudo</span> ./build</div></pre></td></tr></table></figure>

<p>安装完成后，你可以使用命令<code>gpio -v</code>测试wiringPi是否已经正确安装。<br><a id="more"></a><br><strong>连线</strong></p>
<p>RPi上的GPIO与wiringPi中的Pin的对应关系可以参看下表。</p>
<table>
<thead>
<tr>
<th style="text-align:center">wiringPi Pin</th>
<th style="text-align:center">BCM GPIO</th>
<th style="text-align:center">Name</th>
<th style="text-align:center">Header</th>
<th style="text-align:center">Name</th>
<th style="text-align:center">BCM GPIO</th>
<th style="text-align:center">wiringPi Pin</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
<td style="text-align:center">3.3v</td>
<td style="text-align:center">1 &#124; 2</td>
<td style="text-align:center">5v</td>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">R1:0/R2:2</td>
<td style="text-align:center">SDA0</td>
<td style="text-align:center">3 &#124; 4</td>
<td style="text-align:center">5v</td>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">R1:1/R2:3</td>
<td style="text-align:center">SCL0</td>
<td style="text-align:center">5 &#124; 6</td>
<td style="text-align:center">0v</td>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">4</td>
<td style="text-align:center">GPIO7</td>
<td style="text-align:center">7 &#124; 8</td>
<td style="text-align:center">TxD</td>
<td style="text-align:center">14</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
<td style="text-align:center">0v</td>
<td style="text-align:center">9 &#124; 10</td>
<td style="text-align:center">RxD</td>
<td style="text-align:center">15</td>
<td style="text-align:center">16</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">17</td>
<td style="text-align:center">GPIO0</td>
<td style="text-align:center">11 &#124; 12</td>
<td style="text-align:center">GPIO1</td>
<td style="text-align:center">18</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">R1:21/R2:27</td>
<td style="text-align:center">GPIO2</td>
<td style="text-align:center">13 &#124; 14</td>
<td style="text-align:center">0v</td>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">22</td>
<td style="text-align:center">GPIO3</td>
<td style="text-align:center">15 &#124; 16</td>
<td style="text-align:center">GPIO4</td>
<td style="text-align:center">23</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
<td style="text-align:center">3.3v</td>
<td style="text-align:center">17 &#124; 18</td>
<td style="text-align:center">GPIO5</td>
<td style="text-align:center">24</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">10</td>
<td style="text-align:center">MOSI</td>
<td style="text-align:center">19 &#124; 20</td>
<td style="text-align:center">0v</td>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">9</td>
<td style="text-align:center">MISO</td>
<td style="text-align:center">21 &#124; 22</td>
<td style="text-align:center">GPIO6</td>
<td style="text-align:center">25</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">11</td>
<td style="text-align:center">SCLK</td>
<td style="text-align:center">23 &#124; 24</td>
<td style="text-align:center">CE0</td>
<td style="text-align:center">8</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
<td style="text-align:center">0v</td>
<td style="text-align:center">25 &#124; 26</td>
<td style="text-align:center">CE1</td>
<td style="text-align:center">7</td>
<td style="text-align:center">11</td>
</tr>
</tbody>
</table>
<blockquote>
<p>更多信息请参看<a href="https://projects.drogon.net/raspberry-pi/wiringpi/pins/" target="_blank" rel="external">wiringPi Pins</a></p>
</blockquote>
<p>了解了GPIO排布后，开始连接各个元件，连线结果如下图。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/06/Rolb.png" alt="Wire_IMG"></p>
<blockquote>
<p><strong>需要注意的是，我们使用的面包板上的XY两行不是全部连通的，经我测试是分成了3-4-3三组，如果程序运行后不停地出现Start &amp; Stop，请检查XY两行上的线是否在同一组内。</strong></p>
</blockquote>
<p><strong>编写控制代码<code>roll.c</code></strong></p>
<figure class="highlight c"><figcaption><span>roll.c</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;wiringPi.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> DIGIT0 8</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> DIGIT1 9</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> BTN0 10</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> BTN1 11</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">    <span class="keyword">int</span> pin;</div><div class="line">    <span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> run = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> time0 = <span class="number">0</span>, time1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> digit[<span class="number">10</span>][<span class="number">8</span>] = {</div><div class="line">        {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>}</div><div class="line">    };</div><div class="line">    <span class="keyword">char</span> roll[<span class="number">6</span>][<span class="number">8</span>] = {</div><div class="line">        {<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>},</div><div class="line">        {<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>},</div><div class="line">    };</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (wiringPiSetup () == -<span class="number">1</span>)</div><div class="line">        <span class="built_in">exit</span> (<span class="number">1</span>) ;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (pin = <span class="number">0</span> ; pin &lt; <span class="number">8</span> ; ++pin) {</div><div class="line">        pinMode (pin, OUTPUT) ;</div><div class="line">        digitalWrite(pin, HIGH);</div><div class="line">    }</div><div class="line"></div><div class="line">    pinMode(DIGIT0, OUTPUT);</div><div class="line">    pinMode(DIGIT1, OUTPUT);</div><div class="line">    pinMode(BTN0, INPUT);</div><div class="line">    pinMode(BTN1, INPUT);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) {</div><div class="line">        time1 = millis();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (digitalRead(BTN0) && run == <span class="number">0</span>) {</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"Start!"</span>);</div><div class="line">            run = <span class="number">1</span>;</div><div class="line">            m = <span class="number">0</span>;</div><div class="line">            n = <span class="number">0</span>;</div><div class="line">            time0 = millis();</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (digitalRead(BTN1) && run == <span class="number">1</span>) {</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"Stop!"</span>);</div><div class="line">            run = <span class="number">0</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (time1 - time0 &gt;= <span class="number">50</span> && run == <span class="number">1</span>) {</div><div class="line">            time0 = time1;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</div><div class="line">            m = ++m % <span class="number">6</span>;</div><div class="line">            n = ++n % <span class="number">10</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (pin = <span class="number">0</span>; pin &lt; <span class="number">8</span>; pin++) {</div><div class="line">            digitalWrite(pin, flag ? digit[n][pin] : roll[m][pin]);</div><div class="line">        }</div><div class="line"></div><div class="line">        digitalWrite(DIGIT0, flag);</div><div class="line">        digitalWrite(DIGIT1, (flag = <span class="number">1</span> - flag));</div><div class="line">        delay(<span class="number">10</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>保存后执行以下命令编译并运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gcc roll.c -o roll -lwiringPi</div><div class="line">$ <span class="built_in">sudo</span> ./roll</div></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<p>在RPi上运行控制程序后，按一下连线图中左边的按钮，可以看到左边的数码管LED一次点亮如同旋转起来一般，右边的数码管则显示依次增大的数字，同时终端中同步输出当前显示的数字。若按一下右边的按钮则变化将停止。再按左边的按钮可以重新开始。</p>
<p>具体效果可观看视频^_^</p>
<iframe height="480" width="640" src="http://player.youku.com/embed/XNTY5MTQ1ODg4" frameborder="0" allowfullscreen></iframe>

<p><strong>部分原理说明</strong></p>
<ul>
<li>按键处理</li>
</ul>
<p>通常情况下，在使用按键时只需将按键的一端接到3.3V上，另一端接到GPIO口上，通过读取GPIO口的电压值就可以得到按键的通断状态。但在某些特殊环境下，仅仅是把手靠近开关就可能在GPIO上读到高电平，这是因为电路中没有下拉电阻，使得外界干扰影响了对按键的判断。</p>
<p>如下图所示是一个下拉电阻的常见接法。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/06/btn_pull_down.png" alt="Pull_Down"></p>
<p>在GPIO口与GND之间接一个1K-10KΩ的电阻。当外界有干扰源的时候，干扰源在通向GND的过程中，会被电阻消耗掉，保证按键状态检测的准确性。</p>
<ul>
<li>2位8段数码管的使用</li>
</ul>
<p>实验中使用的是一个共阳极数码管，其内部电路如下图所示：</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/06/dgt_sgmt_line.png" alt="Segment_Display_Line"></p>
<p>另外此2位数码管的引脚位置如下图所示：</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/06/dgt_sgmt_pin.png" alt="Segment_Display_Pin"></p>
<p>连线时与内部电路对照着即可，其中5、10为两个数位的控制位，送入高电平时会点亮相应数位。需要注意的是引脚的顺序和数码管上LED的排布顺序不一致，连线时要注意。</p>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p>之前在Raspberry Pi上做了许多好玩的事情，但与物理计算却是一点关系也没有。所以这次我们来尝试用RPi做一个简单的轮盘游戏机。因为材料有限，“轮盘”将使用一个2位8段数码管模拟。</p>
<p>材料准备：</p>
<ul>
<li>Raspberry Pi</li>
<li>面包板一块</li>
<li>2位8段数码管一个</li>
<li>按钮2个</li>
<li>1K~10KΩ电阻2个</li>
<li>面包线+杜邦线若干</li>
</ul>
<p><strong>在RPi上安装wiringPi</strong></p>
<p>使用串口或SSH连接RPi，输入以下命令安装wiringPi。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /tmp/</div><div class="line">$ git clone git://git.drogon.net/wiringPi</div><div class="line">$ <span class="built_in">cd</span> wiringPi</div><div class="line">$ <span class="built_in">sudo</span> ./build</div></pre></td></tr></table></figure>

<p>安装完成后，你可以使用命令<code>gpio -v</code>测试wiringPi是否已经正确安装。<br>]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi上μC/OS II的移植]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-ucos/"/>
    <id>http://www.nilennoct.com//raspberrypi-ucos/</id>
    <published>2013-05-30T12:30:00.000Z</published>
    <updated>2014-03-30T12:22:05.000Z</updated>
    <content type="html"><![CDATA[<p><strong>下载μCOS II for Raspberry Pi源码，修改makefile文件</strong></p>
<p>　　根据自己使用的交叉编译工具链，修改源码根目录下的<code>makefile</code>文件，主要修改的地方有如下两处：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="constant">ARMGNU ?</span>= arm-linux-gnueabi</div><div class="line"><span class="constant"></span></div><div class="line">INCLUDEPATH ?= <span class="string">"./h"</span></div></pre></td></tr></table></figure>

<p><strong>检查源码错误</strong></p>
<p>　　不知道助教是不是有意“增加”实验难度，这次提供的源码中存在不少小错误，比如<code>makefile</code>文件的第59行的<code>ucos_bcm2835.elf</code>最后多了一个“.”、没有注意文件名大小写（这个与操作系统有关）等。这步可以通过执行<code>make</code>命令找出错误的地方，很快就能解决。<br><a id="more"></a><br><strong>修改usrApp/userApp.c文件</strong></p>
<p>　　这次实验的要求除了移植μCOS到RPi上以外，还要求实现两个任务的调度。这两个任务能轮流点亮LED，并通过串口发送消息表明自己正在运行。调度和通过串口发消息已经在提供的代码中实现了，主要要做的就是点亮LED了。</p>
<p>　　这里我直接使用了RPi板子上LED即ACT灯，对应的GPIO号是16。代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "uart.h"</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "ucos/includes.h"</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">void</span> PUT32 ( <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span> );</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> GPSET0     0x2020001C</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> GPCLR0     0x20200028</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> userApp2(<span class="keyword">void</span> * args) {</div><div class="line">	<span class="keyword">int</span> count = <span class="number">4</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(<span class="number">1</span>) {</div><div class="line">		<span class="keyword">if</span> (count &gt;= <span class="number">4</span>) {</div><div class="line">			PUT32(GPSET0, <span class="number">1</span> &lt;&lt; <span class="number">16</span>); <span class="comment">// 16是因为LED的GPIO地址为16.</span></div><div class="line">			count = <span class="number">0</span>;</div><div class="line">		}</div><div class="line">		uart_string(<span class="string">"in userApp2"</span>);</div><div class="line">		OSTimeDly(<span class="number">100</span>);</div><div class="line">		count++;</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> userApp1(<span class="keyword">void</span> * args) {</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(<span class="number">1</span>) {</div><div class="line">		<span class="keyword">if</span> (count &gt;= <span class="number">6</span>) {</div><div class="line">			PUT32(GPCLR0, <span class="number">1</span> &lt;&lt; <span class="number">16</span>);</div><div class="line">			count = <span class="number">2</span>;</div><div class="line">		}</div><div class="line">		uart_string(<span class="string">"in userApp1"</span>);</div><div class="line">		OSTimeDly(<span class="number">100</span>);</div><div class="line">		count++;</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>　　这里说明一下，之所以加入count变量是因为我发现，如果直接对GPIO设置电平值，LED会亮起很短的时间然后马上变暗，无法实现闪烁的效果。</p>
<p><strong>替换kernel.img</strong></p>
<p>　　编译内核并复制到SD卡中，上电开机，可以看到ACT灯开始闪烁了，同时在minicom中也能看到两个任务的输出信息。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/05/Lab_06_01.png" alt="Lab_06_01"></p>
]]></content>
    <summary type="html"><![CDATA[<p><strong>下载μCOS II for Raspberry Pi源码，修改makefile文件</strong></p>
<p>　　根据自己使用的交叉编译工具链，修改源码根目录下的<code>makefile</code>文件，主要修改的地方有如下两处：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="constant">ARMGNU ?</span>= arm-linux-gnueabi</div><div class="line"><span class="constant"></span></div><div class="line">INCLUDEPATH ?= <span class="string">"./h"</span></div></pre></td></tr></table></figure>

<p><strong>检查源码错误</strong></p>
<p>　　不知道助教是不是有意“增加”实验难度，这次提供的源码中存在不少小错误，比如<code>makefile</code>文件的第59行的<code>ucos_bcm2835.elf</code>最后多了一个“.”、没有注意文件名大小写（这个与操作系统有关）等。这步可以通过执行<code>make</code>命令找出错误的地方，很快就能解决。<br>]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用于Raspberry Pi的简易bootloader]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-diy-bootloader/"/>
    <id>http://www.nilennoct.com//raspberrypi-diy-bootloader/</id>
    <published>2013-05-17T05:16:00.000Z</published>
    <updated>2014-03-30T12:22:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p>这是一次痛并快乐着的实验。</p>
<p>以下引用实验要求：</p>
<blockquote>
<p>David Welch的 <a href="https://github.com/dwelch67/raspberrypi" target="_blank" rel="external">GitHub</a> 的<code>bootloader05</code>给出了一个非常简单的RPi bootloader，他的代码链接在内存的0x00020000位置，一直在监听串口是否有XMODEM协议的文件下载，如果有就开始接收数据，并复制到0x00008000位置，传输完成后跳转到 0x00008000去执行。</p>
<p>TA写了一个Python脚本，按照下面的命令调用脚本可以下载并执行用户程序<code>python xmodem-loader.py -p com3 -b 115200 output.bin</code></p>
<p>你的任务是修改bootloader和python脚本实现如下功能：</p>
<p>调用命令<code>python xmodem-loader.py -p com3 -b 115200</code>启动脚本并且与板卡建立串口连接，之后可以发送下面的命令。</p>
<pre><code>    <span class="operator"><span class="keyword">load</span> *.<span class="keyword">bin</span> 下载程序*.<span class="keyword">bin</span>
    <span class="keyword">go</span> 执行已下载的程序
    peek addr 以一个字为单位读取内存中addr位置的数据（addr是<span class="number">4</span>字节对齐，十六进行的形式，长度为<span class="number">8</span>，例如 <span class="number">0x00008000</span>），并以十六进制的形式输出
    poke addr <span class="keyword">data</span> 以一个字为单位修改内存中addr位置的数据为<span class="keyword">data</span>（addr是<span class="number">4</span>字节对齐，十六进行的形式，长 度为<span class="number">8</span>， <span class="keyword">data</span>也是十六进行的形式，长度为<span class="number">8</span>）
    verify *.<span class="keyword">bin</span> 验证已下载的程序和*.<span class="keyword">bin</span>是否完全相同。</span>
</code></pre><p><a id="more"></a><br><strong>获取<code>bootloader05</code>的源码</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~</div><div class="line">mkdir pi</div><div class="line"><span class="built_in">cd</span> pi</div><div class="line">git clone git@github.com:dwelch67/raspberrypi.git</div><div class="line"><span class="built_in">cd</span> raspberrypi</div></pre></td></tr></table></figure>

<p><strong>简要分析<code>bootload05.c</code></strong></p>
<p>这个bootloader确实很短，不过想弄明白还是得花点时间的。其主要思想就是用状态机控制数据的传输过程，简单来说就像下面这样：</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/05/bootloader05.origin.png" alt="Bootloader05_Origin"></p>
<p>可以看到传输过程中先发送一个<code>0x01</code>,即<code>SOH(start of headline)</code>，然后分别检查第二次和第三次接收到的数据是否为<code>block</code>和<code>255-block</code>，<code>block</code>为当前块号，通过后就开始接收128位的数据流，最后在<code>Statue 131</code>检查CRC的值。另外，在数据全部传输完成后bootloader会收到一个<code>0x04</code>信号，即<code>EOT (end of transmission)</code>，此时bootloader会跳转到0x00008000去执行下载的程序。</p>
<p>弄清楚流程后修改就容易多了，为了区分指令类型我在第一个号后添加了一个指令信号，状态机如下图所示：</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/05/bootloader05.neo_.png" alt="Bootloader05_Neo"></p>
<p>也就是把133-136这几个状态作为<code>PEEK</code>和<code>POKE</code>的<code>addr</code>，137-140作为<code>POKE</code>的<code>data</code>.</p>
<p>另外原本的bootloader05对<code>0x04</code>这一信号的判定是放在状态机外的，总让人觉得不舒服，我就把它也合并到了<code>State 0</code>状态中去判断了。</p>
<p><strong><code>xmodem-loader.py</code>的修改</strong></p>
<p>没学过Python的表示压力山大，所幸TA提供的<code>xmodem-loader.py</code>已经把关键的数据传输部分写好了，剩下的就是写一个能够接受用户输入，并对Raspberry Pi作出相应请求的控制器就好了（说的这么厉害其实还不就是<code>while True</code>= =）</p>
<p><strong>效果演示</strong></p>
<ul>
<li>load &amp; verify</li>
</ul>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/05/Lab_05_01.png" alt="Lab_05_01"></p>
<ul>
<li>peek &amp; poke</li>
</ul>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/05/Lab_05_02.png" alt="Lab_05_02"></p>
<ul>
<li>re-verify</li>
</ul>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/05/Lab_05_03.png" alt="Lab_05_03"></p>
<ul>
<li>go</li>
</ul>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/05/Lab_05_04.png" alt="Lab_05_04"></p>
<p><strong>程序源码</strong></p>
<p>因为代码实在太长了，就不贴在这篇博文里了，有兴趣的可以点 <a href="/raspberrypi-diy-bootloader-source/">这里</a> 查看。</p>
<p><strong>补充内容</strong></p>
<ul>
<li><p>编译<code>kernel.img</code>和<code>blinker.bin</code></p>
<p>  进入<code>bootloader05</code>目录，编辑Makefile第一行，修改ARMGNU为你使用的交叉编译器，如<code>ARMGNU ?= arm-linux-gnueabi</code>，保存后执行<code>make</code>命令。</p>
<p>  另外据同学反应在ubuntu 12.04及以下版本可能会出现<code>arm-linux-gnueabi-as</code>错误。目前已知的解决方案是升级系统（别打我）。</p>
</li>
<li><p>找不到blinker.bin，python脚本提示 “file not exist”</p>
<p>  确保blinker.bin与脚本在同一目录下。找不到blinker.bin的请先编译<code>kernel.img</code>和<code>blinker.bin</code>。</p>
</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p>这是一次痛并快乐着的实验。</p>
<p>以下引用实验要求：</p>
<blockquote>
<p>David Welch的 <a href="https://github.com/dwelch67/raspberrypi" target="_blank" rel="external">GitHub</a> 的<code>bootloader05</code>给出了一个非常简单的RPi bootloader，他的代码链接在内存的0x00020000位置，一直在监听串口是否有XMODEM协议的文件下载，如果有就开始接收数据，并复制到0x00008000位置，传输完成后跳转到 0x00008000去执行。</p>
<p>TA写了一个Python脚本，按照下面的命令调用脚本可以下载并执行用户程序<code>python xmodem-loader.py -p com3 -b 115200 output.bin</code></p>
<p>你的任务是修改bootloader和python脚本实现如下功能：</p>
<p>调用命令<code>python xmodem-loader.py -p com3 -b 115200</code>启动脚本并且与板卡建立串口连接，之后可以发送下面的命令。</p>
<pre><code>    <span class="operator"><span class="keyword">load</span> *.<span class="keyword">bin</span> 下载程序*.<span class="keyword">bin</span>
    <span class="keyword">go</span> 执行已下载的程序
    peek addr 以一个字为单位读取内存中addr位置的数据（addr是<span class="number">4</span>字节对齐，十六进行的形式，长度为<span class="number">8</span>，例如 <span class="number">0x00008000</span>），并以十六进制的形式输出
    poke addr <span class="keyword">data</span> 以一个字为单位修改内存中addr位置的数据为<span class="keyword">data</span>（addr是<span class="number">4</span>字节对齐，十六进行的形式，长 度为<span class="number">8</span>， <span class="keyword">data</span>也是十六进行的形式，长度为<span class="number">8</span>）
    verify *.<span class="keyword">bin</span> 验证已下载的程序和*.<span class="keyword">bin</span>是否完全相同。</span>
</code></pre><p>]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Octopress搭建小记]]></title>
    <link href="http://www.nilennoct.com//octopress-on-github-and-bitbucket/"/>
    <id>http://www.nilennoct.com//octopress-on-github-and-bitbucket/</id>
    <published>2013-05-10T06:05:00.000Z</published>
    <updated>2014-08-17T16:19:40.000Z</updated>
    <content type="html"><![CDATA[<p>偶然看到了<a href="http://octopress.org/" target="_blank" rel="external">Octopress</a>的介绍，我便被它惊人的载入速度和独特的离线写作模式吸引了。虽然之前的Wordpress使用的也挺不错的，但细想之下其实我还真用不到那么多功能，顿时让我有了把博客迁移到Octopress上的冲动。</p>
<p>网络上关于Octopress的部署教程已经有很多了，一种不错的方案是使用<a href="http://pages.github.com/" target="_blank" rel="external">Github Pages</a>服务。不过考虑到数据的安全性（比如<code>_config.yml</code>、一些第三方服务的API Key等），我决定同时使用Bitbucket和Github，即使用Bitbucket的私有Repo管理source，使用Github管理生成的页面。</p>
<p>Ruby环境的搭建以及Octopress的安装方法可以在Octopress的文档中找到，这里主要记录部署过程(Ubuntu环境)。</p>
<blockquote>
<p><a href="http://octopress.org/docs/" target="_blank" rel="external">Octopress Documentation</a></p>
</blockquote>
<a id="more"></a>

<p>首先登陆Bitbucket，选择<code>Import repository</code>（亦可依次按下<code>i</code>、<code>r</code>），填写Github上Octopress的项目地址：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">URL</span>: <span class="string">git@github.com:imathis/octopress.git</span></div><div class="line"><span class="attribute">Name</span>: <span class="string">octopress</span></div></pre></td></tr></table></figure>

<p>接下来登陆Github，以<code>github_username.github.io</code>为Repository name建立一个新的repo，这个将用来存放博客页面。</p>
<blockquote>
<p>详见 <a href="https://help.github.com/articles/user-organization-and-project-pages" target="_blank" rel="external">User, Organization and Project Pages</a></p>
</blockquote>
<p>接下来clone刚建立的repo到本地。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~</div><div class="line">$ git clone git@bitbucket.org:bitbucket_username/octopress.git octopress</div><div class="line">$ <span class="built_in">cd</span> octopress</div><div class="line">$ git remote add octopress https://github.com/imathis/octopress</div></pre></td></tr></table></figure>

<p>最后一条命令将Github上的官方repo添加到当前git配置中，以后可以用来升级Octopress系统。</p>
<p>按官方文档的方法安装好Octopress，执行以下命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rake generate</div><div class="line">$ rake deploy</div></pre></td></tr></table></figure>

<p>Octopress会自动生成一个<code>_deploy</code>文件夹，里面存放的就是用来发布到Github上的静态页面。不过因为还没有配置，所以此时是发布到了Bitbucket的gh-pages分支中。</p>
<p>打开<code>Rakefile</code>，修改<code>deploy_branch</code>的值为<code>master</code>，然后修改<code>_deploy</code>目录中的git配置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> _deploy</div><div class="line">$ nano .git/config</div></pre></td></tr></table></figure>

<p>修改<code>[remote &quot;origin&quot;]</code>中的<code>url</code>，将其修改为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git<span class="variable">@github</span>.<span class="symbol">com:</span>github_username/github_username.github.io.git</div></pre></td></tr></table></figure>

<p>保存git配置后，切换分支为master，上传文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git branch master</div><div class="line"><span class="variable">$ </span>git checkout master</div><div class="line"><span class="variable">$ </span>git push -u origin master</div></pre></td></tr></table></figure>

<p>大约过10分钟后，访问<code>github_username.github.io</code>就可以看到你的博客了。</p>
<p>Github Pages支持绑定域名，首先在你的域名管理中，添加一个<code>CNAME</code>记录，指向<code>github_username.github.io</code>，然后执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/octopress</div><div class="line">$ <span class="built_in">echo</span> your_domain &gt; <span class="built_in">source</span>/CNAME</div><div class="line">$ rake generate</div><div class="line">$ rake deploy</div></pre></td></tr></table></figure>

<p>稍候片刻，待域名信息更新后就可以通过绑定的域名访问博客了。</p>
<blockquote>
<p>详见 <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages" target="_blank" rel="external">Setting up a custom domain with Pages</a></p>
</blockquote>
<p>至此Octopress的安装部署就完成了。以后写完日志，只需要执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pwd is ~/octopress</span></div><div class="line">$ rake generate</div><div class="line">$ rake deploy</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>

<p>即可实现博客的更新以及Bitbucket的数据备份。</p>
]]></content>
    <summary type="html"><![CDATA[<p>偶然看到了<a href="http://octopress.org/" target="_blank" rel="external">Octopress</a>的介绍，我便被它惊人的载入速度和独特的离线写作模式吸引了。虽然之前的Wordpress使用的也挺不错的，但细想之下其实我还真用不到那么多功能，顿时让我有了把博客迁移到Octopress上的冲动。</p>
<p>网络上关于Octopress的部署教程已经有很多了，一种不错的方案是使用<a href="http://pages.github.com/" target="_blank" rel="external">Github Pages</a>服务。不过考虑到数据的安全性（比如<code>_config.yml</code>、一些第三方服务的API Key等），我决定同时使用Bitbucket和Github，即使用Bitbucket的私有Repo管理source，使用Github管理生成的页面。</p>
<p>Ruby环境的搭建以及Octopress的安装方法可以在Octopress的文档中找到，这里主要记录部署过程(Ubuntu环境)。</p>
<blockquote>
<p><a href="http://octopress.org/docs/" target="_blank" rel="external">Octopress Documentation</a></p>
</blockquote>
]]></summary>
    
      <category term="Blog" scheme="http://www.nilennoct.com/tags/Blog/"/>
    
      <category term="Note" scheme="http://www.nilennoct.com/categories/Note/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给RaspberryPi增加一个系统调用]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-add-linux-syscall/"/>
    <id>http://www.nilennoct.com//raspberrypi-add-linux-syscall/</id>
    <published>2013-04-22T04:10:43.000Z</published>
    <updated>2014-03-30T12:22:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>安装交叉编译工具，并设置NAS</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install gcc-arm-linux-gnueabi</div><div class="line"><span class="built_in">cd</span> ~</div><div class="line">mkdir pi</div><div class="line"><span class="built_in">sudo</span> mount <span class="number">192.168</span>.<span class="number">0.4</span>:/home/pi /home/neo/pi</div></pre></td></tr></table></figure>

<p>详情见<a href="http://www.nilennoct.com/raspberrypi-cross-compile/" target="_blank" rel="external">搭建RaspberryPi的交叉编译环境</a>。</p>
<p><strong>下载Raspberry Pi的源码</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># PC</span></div><div class="line"><span class="built_in">cd</span> ~/pi</div><div class="line">mkdir kernel</div><div class="line"><span class="built_in">cd</span> kernel</div><div class="line">git clone https://github.com/raspberrypi/linux.git</div><div class="line">git clone https://github.com/raspberrypi/firmware.git</div></pre></td></tr></table></figure>

<p>因为网络原因这一步耗时较长，需要耐心等待。也可以直接在github上下载zip压缩包自行解压，不过无论是使用RPi解压或是通过NAS解压速度都不快，可以考虑取下SD卡在PC上直接解压。<br><a id="more"></a></p>
<p><strong>提取原有的内核配置文件配置新内核</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># RPi</span></div><div class="line">cd ~/kernel/linux</div><div class="line">sudo zcat /<span class="keyword">proc</span>/config.gz &gt; .config</div><div class="line"><span class="comment"># PC</span></div><div class="line">make <span class="type">ARCH</span>=arm <span class="type">CROSS_COMPILE</span>=/usr/bin/arm-linux-gnueabi- oldconfig</div></pre></td></tr></table></figure>

<p>因为不需要修改内核配置，直接一路回车结束配置即可。</p>
<p><strong>增加新的系统调用</strong></p>
<ul>
<li>在linux/arch/arm/kernel/目录下新建mysyscall.c文件，输入以下内容</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;linux/kernel.h&gt;</span></div><div class="line"><span class="keyword">void</span> hello(<span class="keyword">void</span>) {</div><div class="line">	printk(<span class="string">"Hello world!\tFrom Neo\n"</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>在linux/arch/arm/kernel/call.S中添加新的系统调用，这里我替换的是原本为sys_ni_syscall的0x900000+223号系统调用，如下图所示。</li>
</ul>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_01.png" alt="Lab_04_01"></p>
<ul>
<li>修改arch/arm/kernel/目录下的Makeﬁle文件，在obj-y后面添加mysyscall.o，如下图。</li>
</ul>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_02.png" alt="Lab_04_02"></p>
<p><strong>编译内核</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># PC</span></div><div class="line">make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- -k</div></pre></td></tr></table></figure>

<p>之所以选择交叉编译是因为RPi的主频和PC比起来相差太多，若是直接用RPi编译内核耗时太长了。</p>
<p><strong>编译新lib</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># PC</span></div><div class="line"><span class="built_in">cd</span> ~/pi/kernel</div><div class="line">mkdir modules</div><div class="line"><span class="built_in">cd</span> linux</div><div class="line">make modules_install ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- INSTALL_MOD_PATH=../modules</div></pre></td></tr></table></figure>

<p><strong>备份 firmware</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># RPi</span></div><div class="line"><span class="built_in">cd</span> ~/kernel</div><div class="line">mkdir firmware_ori</div><div class="line"><span class="built_in">cd</span> /boot</div><div class="line">cp *.elf *.bin ~/kernel/firmware_ori</div></pre></td></tr></table></figure>

<p><strong>更新内核、lib和firmware</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># RPi</span></div><div class="line"><span class="built_in">cd</span> ~/kernel</div><div class="line"><span class="built_in">sudo</span> cp linux/arch/arm/boot/Image /boot/kernel_new.img</div><div class="line"><span class="built_in">sudo</span> cp modules/lib /</div><div class="line"><span class="built_in">cd</span> firmware/boot</div><div class="line"><span class="built_in">sudo</span> cp bootcode.bin fixup.dat fixup_cd.dat start.elf /boot</div></pre></td></tr></table></figure>

<p><strong>修改RPi的配置文件/boot/config.txt</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># RPi</span></div><div class="line"><span class="built_in">sudo</span> nano /boot/config.txt</div></pre></td></tr></table></figure>

<p>在首行加上“kernel=kernel_new.img”即可。若原来已经存在了kernel字段，直接修改就可以了。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_03.png" alt="Lab_04_03"></p>
<p><strong>重启，测试新内核</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># RPi</span></div><div class="line"><span class="built_in">sudo</span> reboot</div></pre></td></tr></table></figure>

<p>先看看原内核信息，如下图。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_04.png" alt="Lab_04_04"></p>
<p>新内核信息如下图。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_05.png" alt="Lab_04_05"></p>
<p>可以看到内核已经从3.2.27+升级到了3.6.11。</p>
<p><strong>测试新增加的系统调用</strong></p>
<ul>
<li>编写测试文件hello.c，输入以下内容。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> sys_hello() {__asm__ __volatile__ ("swi 0x900000+223\n\t");} while(0)</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>) {</div><div class="line">	sys_hello();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Type \"dmesg | tail\" to see the result.\n"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>编译运行，查看结果。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># RPi</span></div><div class="line">gcc hello.c -o hello</div><div class="line">./hello</div><div class="line">dmesg | tail</div></pre></td></tr></table></figure>

<p>结果如下图。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_06.png" alt="Lab_04_06"></p>
<p>在内核信息的最后一行可以看到我们的hello()函数已经成功执行了。</p>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>安装交叉编译工具，并设置NAS</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install gcc-arm-linux-gnueabi</div><div class="line"><span class="built_in">cd</span> ~</div><div class="line">mkdir pi</div><div class="line"><span class="built_in">sudo</span> mount <span class="number">192.168</span>.<span class="number">0.4</span>:/home/pi /home/neo/pi</div></pre></td></tr></table></figure>

<p>详情见<a href="http://www.nilennoct.com/raspberrypi-cross-compile/" target="_blank" rel="external">搭建RaspberryPi的交叉编译环境</a>。</p>
<p><strong>下载Raspberry Pi的源码</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># PC</span></div><div class="line"><span class="built_in">cd</span> ~/pi</div><div class="line">mkdir kernel</div><div class="line"><span class="built_in">cd</span> kernel</div><div class="line">git clone https://github.com/raspberrypi/linux.git</div><div class="line">git clone https://github.com/raspberrypi/firmware.git</div></pre></td></tr></table></figure>

<p>因为网络原因这一步耗时较长，需要耐心等待。也可以直接在github上下载zip压缩包自行解压，不过无论是使用RPi解压或是通过NAS解压速度都不快，可以考虑取下SD卡在PC上直接解压。<br>]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最短的 IE 版本判断]]></title>
    <link href="http://www.nilennoct.com//shortest-ie-version-detect/"/>
    <id>http://www.nilennoct.com//shortest-ie-version-detect/</id>
    <published>2013-04-19T02:21:55.000Z</published>
    <updated>2014-08-17T16:27:44.000Z</updated>
    <content type="html"><![CDATA[<p>网上看到的一段很酷的代码，留着备用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ----------------------------------------------------------</span></div><div class="line"><span class="comment">// A short snippet for detecting versions of IE in JavaScript</span></div><div class="line"><span class="comment">// without resorting to user-agent sniffing</span></div><div class="line"><span class="comment">// ----------------------------------------------------------</span></div><div class="line"><span class="comment">// If you're not in IE (or IE version is less than 5) then:</span></div><div class="line"><span class="comment">//     ie === undefined</span></div><div class="line"><span class="comment">// If you're in IE (&gt;=5) then you can determine which version:</span></div><div class="line"><span class="comment">//     ie === 7; // IE7</span></div><div class="line"><span class="comment">// Thus, to detect IE:</span></div><div class="line"><span class="comment">//     if (ie) {}</span></div><div class="line"><span class="comment">// And to detect the version:</span></div><div class="line"><span class="comment">//     ie === 6 // IE6</span></div><div class="line"><span class="comment">//     ie &gt; 7 // IE8, IE9 ...</span></div><div class="line"><span class="comment">//     ie &lt; 9 // Anything less than IE9</span></div><div class="line"><span class="comment">// ----------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment">// UPDATE: Now using Live NodeList idea from @jdalton</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> ie = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"></div><div class="line">    <span class="keyword">var</span> undef,</div><div class="line">        v = <span class="number">3</span>,</div><div class="line">        div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</div><div class="line">        all = div.getElementsByTagName(<span class="string">'i'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (</div><div class="line">        div.innerHTML = <span class="string">''</span>,</div><div class="line">        all[<span class="number">0</span>]</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="keyword">return</span> v &gt; <span class="number">4</span> ? v : undef;</div><div class="line"></div><div class="line">}());</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="Javascript" scheme="http://www.nilennoct.com/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[RPi] ARM指令]]></title>
    <link href="http://www.nilennoct.com//raspberry-pi-arm-instruction/"/>
    <id>http://www.nilennoct.com//raspberry-pi-arm-instruction/</id>
    <published>2013-04-10T18:02:35.000Z</published>
    <updated>2014-03-30T12:22:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>生成了Thumb指令还是ARM指令，如何通过编译参数改变</strong></p>
<p>编写测试代码arm.c。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">	a++;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>用如下命令编译，并使用objdump查看。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">gcc -c arm.c</div><div class="line">objdump -d arm.o</div><div class="line"></div><div class="line">arm.o:     file format elf32-littlearm</div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;main&gt;:</div><div class="line">   <span class="number">0</span>:	e52db004 	push	{fp}		; (str fp, [sp, <span class="preprocessor">#-4]!)</span></div><div class="line">   <span class="number">4</span>:	e28db000 	add	fp, sp, <span class="preprocessor">#0</span></div><div class="line">   <span class="number">8</span>:	e24dd00c 	sub	sp, sp, <span class="preprocessor">#12</span></div><div class="line">   c:	e3a03000 	mov	r3, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">10</span>:	e50b3008 	str	r3, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  <span class="number">14</span>:	e51b3008 	ldr	r3, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  <span class="number">18</span>:	e2833001 	add	r3, r3, <span class="preprocessor">#1</span></div><div class="line">  <span class="number">1</span>c:	e50b3008 	str	r3, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  <span class="number">20</span>:	e3a03000 	mov	r3, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">24</span>:	e1a00003 	mov	r0, r3</div><div class="line">  <span class="number">28</span>:	e28bd000 	add	sp, fp, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">2</span>c:	e8bd0800 	pop	{fp}</div><div class="line">  <span class="number">30</span>:	e12fff1e 	bx	lr</div></pre></td></tr></table></figure>

<p>可以看到指令长度都是32位的，说明gcc默认是以arm指令编译的。使用如下命令查找如何以Thumb编译。<br><a id="more"></a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gcc --target-help | grep [Tt]humb</div><div class="line">-mcallee-super-interworking Thumb: Assume non-<span class="keyword">static</span> functions may be called</div><div class="line">-mcaller-super-interworking Thumb: Assume function pointers may go to non-Thumb aware code</div><div class="line">-mthumb                     Compile <span class="keyword">for</span> the Thumb not the ARM</div><div class="line">-mthumb-interwork           Support calls between Thumb and ARM instruction</div><div class="line">-mtpcs-frame                Thumb: Generate (non-leaf) <span class="built_in">stack</span> frames even <span class="keyword">if</span></div><div class="line">-mtpcs-leaf-frame           Thumb: Generate (leaf) <span class="built_in">stack</span> frames even <span class="keyword">if</span> not</div><div class="line">-mthumb                 assemble Thumb code</div><div class="line">-mthumb-interwork       support ARM/Thumb interworking</div><div class="line">--thumb-entry=&lt;sym&gt;         Set the entry point to be Thumb symbol &lt;sym&gt;</div><div class="line">--[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-<span class="number">2</span> branch erratum fix</div><div class="line">--thumb-entry=&lt;sym&gt;         Set the entry point to be Thumb symbol &lt;sym&gt;</div><div class="line">--[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-<span class="number">2</span> branch erratum fix</div></pre></td></tr></table></figure>

<p>可以看到使用“-mthumb”参数可以“Compile for the Thumb not the ARM”。下面来检验一下。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">gcc -c -mthumb -msoft-<span class="keyword">float</span> arm.c</div><div class="line">objdump -d arm.o</div><div class="line"></div><div class="line">arm.o:     file format elf32-littlearm</div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;main&gt;:</div><div class="line">   <span class="number">0</span>:	b580      	push	{r7, lr}</div><div class="line">   <span class="number">2</span>:	b082      	sub	sp, <span class="preprocessor">#8</span></div><div class="line">   <span class="number">4</span>:	af00      	add	r7, sp, <span class="preprocessor">#0</span></div><div class="line">   <span class="number">6</span>:	<span class="number">2300</span>      	movs	r3, <span class="preprocessor">#0</span></div><div class="line">   <span class="number">8</span>:	<span class="number">607</span>b      	str	r3, [r7, <span class="preprocessor">#4]</span></div><div class="line">   a:	<span class="number">687</span>b      	ldr	r3, [r7, <span class="preprocessor">#4]</span></div><div class="line">   c:	<span class="number">3301</span>      	adds	r3, <span class="preprocessor">#1</span></div><div class="line">   e:	<span class="number">607</span>b      	str	r3, [r7, <span class="preprocessor">#4]</span></div><div class="line">  <span class="number">10</span>:	<span class="number">2300</span>      	movs	r3, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">12</span>:	<span class="number">1</span>c18      	adds	r0, r3, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">14</span>:	<span class="number">46</span>bd      	mov	sp, r7</div><div class="line">  <span class="number">16</span>:	b002      	add	sp, <span class="preprocessor">#8</span></div><div class="line">  <span class="number">18</span>:	bd80      	pop	{r7, pc}</div><div class="line">  <span class="number">1</span>a:	<span class="number">46</span>c0      	nop			; (mov r8, r8)</div></pre></td></tr></table></figure>

<p>可以看到指令长度变成了16位，即使用了Thumb指令。</p>
<hr>
<p><strong>对于ARM指令，能否产生条件执行的指令</strong></p>
<p>编写测试代码branch.c。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> f(<span class="keyword">int</span> a, <span class="keyword">int</span> b) {</div><div class="line">	<span class="keyword">int</span> t;</div><div class="line">	<span class="keyword">if</span> (a &gt; b)</div><div class="line">		t = a - b--;</div><div class="line">	<span class="keyword">if</span> (a == b - <span class="number">10</span>)</div><div class="line">		t = a + b++;</div><div class="line">	<span class="keyword">return</span> t;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">	f(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用如下命令编译，并使用objdump查看结果。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">gcc -c branch.c -O3</div><div class="line">objdump -d branch.o</div><div class="line"></div><div class="line">branch.o:     file format elf32-littlearm</div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;f&gt;:</div><div class="line">   <span class="number">0</span>:	e1500001 	cmp	r0, r1</div><div class="line">   <span class="number">4</span>:	c0613000 	rsbgt	r3, r1, r0</div><div class="line">   <span class="number">8</span>:	c2411001 	subgt	r1, r1, <span class="preprocessor">#1</span></div><div class="line">   c:	e241200a 	sub	r2, r1, <span class="preprocessor">#10</span></div><div class="line">  <span class="number">10</span>:	e1520000 	cmp	r2, r0</div><div class="line">  <span class="number">14</span>:	<span class="number">00813000</span> 	addeq	r3, r1, r0</div><div class="line">  <span class="number">18</span>:	e1a00003 	mov	r0, r3</div><div class="line">  <span class="number">1</span>c:	e12fff1e 	bx	lr</div><div class="line"></div><div class="line">Disassembly of section .text.startup:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;main&gt;:</div><div class="line">   <span class="number">0</span>:	e3a00000 	mov	r0, <span class="preprocessor">#0</span></div><div class="line">   <span class="number">4</span>:	e12fff1e 	bx	lr</div></pre></td></tr></table></figure>

<p>可以看到有rsbgt、subgt、addeq等条件执行指令的出现。</p>
<hr>
<p><strong>设计C的代码场景，观察是否产生了寄存器移位寻址</strong></p>
<p>编写测试代码shift.c。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> f(<span class="keyword">int</span> i) {</div><div class="line">	<span class="keyword">int</span> a[<span class="number">20</span>];</div><div class="line">	a[<span class="number">19</span>] = a[i*<span class="number">2</span>];</div><div class="line">	<span class="keyword">return</span> a[<span class="number">19</span>];</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">	<span class="keyword">int</span> b = f(<span class="number">5</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用如下命令编译，并使用objdump查看结果。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">gcc -c shift.c -O3</div><div class="line">objdump -d shift.o</div><div class="line"></div><div class="line">shift.o:     file format elf32-littlearm</div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;f&gt;:</div><div class="line">   <span class="number">0</span>:	e24dd050 	sub	sp, sp, <span class="preprocessor">#80	; 0x50</span></div><div class="line">   <span class="number">4</span>:	e28d3050 	add	r3, sp, <span class="preprocessor">#80	; 0x50</span></div><div class="line">   <span class="number">8</span>:	e0830180 	add	r0, r3, r0, lsl <span class="preprocessor">#3</span></div><div class="line">   c:	e5100050 	ldr	r0, [r0, <span class="preprocessor">#-80]	; 0x50</span></div><div class="line">  <span class="number">10</span>:	e28dd050 	add	sp, sp, <span class="preprocessor">#80	; 0x50</span></div><div class="line">  <span class="number">14</span>:	e12fff1e 	bx	lr</div><div class="line"></div><div class="line">Disassembly of section .text.startup:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;main&gt;:</div><div class="line">   <span class="number">0</span>:	e3a00000 	mov	r0, <span class="preprocessor">#0</span></div><div class="line">   <span class="number">4</span>:	e12fff1e 	bx	lr</div></pre></td></tr></table></figure>

<p>可以看到在命令“add    r0, r3, r0, lsl #3”中，第2个寄存器操作数先做了左移三位的操作，然后再与第1个操作数相加。</p>
<hr>
<p><strong>设计C的代码场景,观察一个复杂的32位数是如何装载到寄存器的</strong></p>
<p>编写测试代码bigint.c。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> f() {</div><div class="line">	<span class="keyword">return</span> <span class="number">0xFDB86420</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> a;</div><div class="line">	a = f();</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用如下命令编译，并使用objdump查看结果。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">gcc -c bigint.c</div><div class="line">objdump -d bigint.o</div><div class="line"></div><div class="line">bigint.o:     file format elf32-littlearm</div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;f&gt;:</div><div class="line">   <span class="number">0</span>:	e52db004 	push	{fp}		; (str fp, [sp, <span class="preprocessor">#-4]!)</span></div><div class="line">   <span class="number">4</span>:	e28db000 	add	fp, sp, <span class="preprocessor">#0</span></div><div class="line">   <span class="number">8</span>:	e59f300c 	ldr	r3, [pc, <span class="preprocessor">#12]	; 1c &lt;f+0x1c&gt;</span></div><div class="line">   c:	e1a00003 	mov	r0, r3</div><div class="line">  <span class="number">10</span>:	e28bd000 	add	sp, fp, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">14</span>:	e8bd0800 	pop	{fp}</div><div class="line">  <span class="number">18</span>:	e12fff1e 	bx	lr</div><div class="line">  <span class="number">1</span>c:	fdb86420 	.word	<span class="number">0xfdb86420</span></div><div class="line"></div><div class="line"><span class="number">00000020</span> &lt;main&gt;:</div><div class="line">  <span class="number">20</span>:	e92d4800 	push	{fp, lr}</div><div class="line">  <span class="number">24</span>:	e28db004 	add	fp, sp, <span class="preprocessor">#4</span></div><div class="line">  <span class="number">28</span>:	e24dd008 	sub	sp, sp, <span class="preprocessor">#8</span></div><div class="line">  <span class="number">2</span>c:	ebfffffe 	bl	<span class="number">0</span> &lt;f&gt;</div><div class="line">  <span class="number">30</span>:	e50b0008 	str	r0, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  <span class="number">34</span>:	e3a03000 	mov	r3, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">38</span>:	e1a00003 	mov	r0, r3</div><div class="line">  <span class="number">3</span>c:	e24bd004 	sub	sp, fp, <span class="preprocessor">#4</span></div><div class="line">  <span class="number">40</span>:	e8bd8800 	pop	{fp, pc}</div></pre></td></tr></table></figure>

<p>可以看到ARM在处理32位数的时候，不是像MIPS那样通过lui、ori指令实现，而是直接将其作为伪指令存在内存中，通过ldr指令读取到寄存器中。</p>
<hr>
<p><strong>写一个C的多重函数调用的程序，观察和分析</strong></p>
<p>编写测试代码bigint.c。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> a(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> n) {</div><div class="line">	<span class="keyword">return</span> l * x + m * y + n * z;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> b(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z) {</div><div class="line">	<span class="keyword">int</span> l = <span class="number">4</span>, m = <span class="number">2</span>, n = <span class="number">1</span>;</div><div class="line">	x++; y++; z++;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> a(x, y, z, l, m, n);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">	<span class="keyword">int</span> a = b(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用如下命令编译，并使用objdump查看结果。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">gcc -c call.c</div><div class="line">objdump -d call.o</div><div class="line"></div><div class="line">call.o:     file format elf32-littlearm</div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;a&gt;:</div><div class="line">   <span class="number">0</span>:	e52db004 	push	{fp}		; (str fp, [sp, <span class="preprocessor">#-4]!)</span></div><div class="line">   <span class="number">4</span>:	e28db000 	add	fp, sp, <span class="preprocessor">#0</span></div><div class="line">   <span class="number">8</span>:	e24dd014 	sub	sp, sp, <span class="preprocessor">#20</span></div><div class="line">   c:	e50b0008 	str	r0, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  <span class="number">10</span>:	e50b100c 	str	r1, [fp, <span class="preprocessor">#-12]</span></div><div class="line">  <span class="number">14</span>:	e50b2010 	str	r2, [fp, <span class="preprocessor">#-16]</span></div><div class="line">  <span class="number">18</span>:	e50b3014 	str	r3, [fp, <span class="preprocessor">#-20]</span></div><div class="line">  <span class="number">1</span>c:	e51b3014 	ldr	r3, [fp, <span class="preprocessor">#-20]</span></div><div class="line">  <span class="number">20</span>:	e51b2008 	ldr	r2, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  <span class="number">24</span>:	e0020392 	mul	r2, r2, r3</div><div class="line">  <span class="number">28</span>:	e59b3004 	ldr	r3, [fp, <span class="preprocessor">#4]</span></div><div class="line">  <span class="number">2</span>c:	e51b100c 	ldr	r1, [fp, <span class="preprocessor">#-12]</span></div><div class="line">  <span class="number">30</span>:	e0030391 	mul	r3, r1, r3</div><div class="line">  <span class="number">34</span>:	e0822003 	add	r2, r2, r3</div><div class="line">  <span class="number">38</span>:	e59b3008 	ldr	r3, [fp, <span class="preprocessor">#8]</span></div><div class="line">  <span class="number">3</span>c:	e51b1010 	ldr	r1, [fp, <span class="preprocessor">#-16]</span></div><div class="line">  <span class="number">40</span>:	e0030391 	mul	r3, r1, r3</div><div class="line">  <span class="number">44</span>:	e0823003 	add	r3, r2, r3</div><div class="line">  <span class="number">48</span>:	e1a00003 	mov	r0, r3</div><div class="line">  <span class="number">4</span>c:	e28bd000 	add	sp, fp, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">50</span>:	e8bd0800 	pop	{fp}</div><div class="line">  <span class="number">54</span>:	e12fff1e 	bx	lr</div><div class="line"></div><div class="line"><span class="number">00000058</span> &lt;b&gt;:</div><div class="line">  <span class="number">58</span>:	e92d4800 	push	{fp, lr}</div><div class="line">  <span class="number">5</span>c:	e28db004 	add	fp, sp, <span class="preprocessor">#4</span></div><div class="line">  <span class="number">60</span>:	e24dd028 	sub	sp, sp, <span class="preprocessor">#40	; 0x28</span></div><div class="line">  <span class="number">64</span>:	e50b0018 	str	r0, [fp, <span class="preprocessor">#-24]</span></div><div class="line">  <span class="number">68</span>:	e50b101c 	str	r1, [fp, <span class="preprocessor">#-28]</span></div><div class="line">  <span class="number">6</span>c:	e50b2020 	str	r2, [fp, <span class="preprocessor">#-32]</span></div><div class="line">  <span class="number">70</span>:	e3a03004 	mov	r3, <span class="preprocessor">#4</span></div><div class="line">  <span class="number">74</span>:	e50b3008 	str	r3, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  <span class="number">78</span>:	e3a03002 	mov	r3, <span class="preprocessor">#2</span></div><div class="line">  <span class="number">7</span>c:	e50b300c 	str	r3, [fp, <span class="preprocessor">#-12]</span></div><div class="line">  <span class="number">80</span>:	e3a03001 	mov	r3, <span class="preprocessor">#1</span></div><div class="line">  <span class="number">84</span>:	e50b3010 	str	r3, [fp, <span class="preprocessor">#-16]</span></div><div class="line">  <span class="number">88</span>:	e51b3018 	ldr	r3, [fp, <span class="preprocessor">#-24]</span></div><div class="line">  <span class="number">8</span>c:	e2833001 	add	r3, r3, <span class="preprocessor">#1</span></div><div class="line">  <span class="number">90</span>:	e50b3018 	str	r3, [fp, <span class="preprocessor">#-24]</span></div><div class="line">  <span class="number">94</span>:	e51b301c 	ldr	r3, [fp, <span class="preprocessor">#-28]</span></div><div class="line">  <span class="number">98</span>:	e2833001 	add	r3, r3, <span class="preprocessor">#1</span></div><div class="line">  <span class="number">9</span>c:	e50b301c 	str	r3, [fp, <span class="preprocessor">#-28]</span></div><div class="line">  a0:	e51b3020 	ldr	r3, [fp, <span class="preprocessor">#-32]</span></div><div class="line">  a4:	e2833001 	add	r3, r3, <span class="preprocessor">#1</span></div><div class="line">  a8:	e50b3020 	str	r3, [fp, <span class="preprocessor">#-32]</span></div><div class="line">  ac:	e51b300c 	ldr	r3, [fp, <span class="preprocessor">#-12]</span></div><div class="line">  b0:	e58d3000 	str	r3, [sp]</div><div class="line">  b4:	e51b3010 	ldr	r3, [fp, <span class="preprocessor">#-16]</span></div><div class="line">  b8:	e58d3004 	str	r3, [sp, <span class="preprocessor">#4]</span></div><div class="line">  bc:	e51b0018 	ldr	r0, [fp, <span class="preprocessor">#-24]</span></div><div class="line">  c0:	e51b101c 	ldr	r1, [fp, <span class="preprocessor">#-28]</span></div><div class="line">  c4:	e51b2020 	ldr	r2, [fp, <span class="preprocessor">#-32]</span></div><div class="line">  c8:	e51b3008 	ldr	r3, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  cc:	ebfffffe 	bl	<span class="number">0</span> &lt;a&gt;</div><div class="line">  d0:	e1a03000 	mov	r3, r0</div><div class="line">  d4:	e1a00003 	mov	r0, r3</div><div class="line">  d8:	e24bd004 	sub	sp, fp, <span class="preprocessor">#4</span></div><div class="line">  dc:	e8bd8800 	pop	{fp, pc}</div><div class="line"></div><div class="line"><span class="number">000000e0</span> &lt;main&gt;:</div><div class="line">  e0:	e92d4800 	push	{fp, lr}</div><div class="line">  e4:	e28db004 	add	fp, sp, <span class="preprocessor">#4</span></div><div class="line">  e8:	e24dd008 	sub	sp, sp, <span class="preprocessor">#8</span></div><div class="line">  ec:	e3a00001 	mov	r0, <span class="preprocessor">#1</span></div><div class="line">  f0:	e3a01002 	mov	r1, <span class="preprocessor">#2</span></div><div class="line">  f4:	e3a02004 	mov	r2, <span class="preprocessor">#4</span></div><div class="line">  f8:	ebfffffe 	bl	<span class="number">58</span> &lt;b&gt;</div><div class="line">  fc:	e50b0008 	str	r0, [fp, <span class="preprocessor">#-8]</span></div><div class="line"> <span class="number">100</span>:	e3a03000 	mov	r3, <span class="preprocessor">#0</span></div><div class="line"> <span class="number">104</span>:	e1a00003 	mov	r0, r3</div><div class="line"> <span class="number">108</span>:	e24bd004 	sub	sp, fp, <span class="preprocessor">#4</span></div><div class="line"> <span class="number">10</span>c:	e8bd8800 	pop	{fp, pc}</div></pre></td></tr></table></figure>

<p>分析得到的汇编代码可以得知：</p>
<ul>
<li>调用时的返回地址在lr中；</li>
<li>传入的参数保存在r0—r3中，若有更多的参数则多出的参数存在内存中；</li>
<li>本地变量的堆栈分配在高地址，传递进来的参数分配在低地址；</li>
<li>寄存器是callee保存的，部分保存。</li>
</ul>
<hr>
<p><strong>MLA是带累加的乘法，尝试要如何写C的表达式能编译得到MLA指令</strong></p>
<p>编写测试代码mla.c。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> f(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) {</div><div class="line">	<span class="keyword">return</span> a * b + c;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">	<span class="keyword">int</span> t;</div><div class="line">	t = f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>用如下命令编译，并使用objdump查看。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">gcc -c mla.c -O3</div><div class="line">objdump -d mla.o</div><div class="line"></div><div class="line">mla.o:     file format elf32-littlearm</div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;f&gt;:</div><div class="line">   <span class="number">0</span>:	e0202091 	mla	r0, r1, r0, r2</div><div class="line">   <span class="number">4</span>:	e12fff1e 	bx	lr</div><div class="line"></div><div class="line">Disassembly of section .text.startup:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;main&gt;:</div><div class="line">   <span class="number">0</span>:	e3a00000 	mov	r0, <span class="preprocessor">#0</span></div><div class="line">   <span class="number">4</span>:	e12fff1e 	bx	lr</div></pre></td></tr></table></figure>

<p>可以看到在f()函数中的运算使用了mla指令。</p>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>生成了Thumb指令还是ARM指令，如何通过编译参数改变</strong></p>
<p>编写测试代码arm.c。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">	a++;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>用如下命令编译，并使用objdump查看。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">gcc -c arm.c</div><div class="line">objdump -d arm.o</div><div class="line"></div><div class="line">arm.o:     file format elf32-littlearm</div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line"><span class="number">00000000</span> &lt;main&gt;:</div><div class="line">   <span class="number">0</span>:	e52db004 	push	{fp}		; (str fp, [sp, <span class="preprocessor">#-4]!)</span></div><div class="line">   <span class="number">4</span>:	e28db000 	add	fp, sp, <span class="preprocessor">#0</span></div><div class="line">   <span class="number">8</span>:	e24dd00c 	sub	sp, sp, <span class="preprocessor">#12</span></div><div class="line">   c:	e3a03000 	mov	r3, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">10</span>:	e50b3008 	str	r3, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  <span class="number">14</span>:	e51b3008 	ldr	r3, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  <span class="number">18</span>:	e2833001 	add	r3, r3, <span class="preprocessor">#1</span></div><div class="line">  <span class="number">1</span>c:	e50b3008 	str	r3, [fp, <span class="preprocessor">#-8]</span></div><div class="line">  <span class="number">20</span>:	e3a03000 	mov	r3, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">24</span>:	e1a00003 	mov	r0, r3</div><div class="line">  <span class="number">28</span>:	e28bd000 	add	sp, fp, <span class="preprocessor">#0</span></div><div class="line">  <span class="number">2</span>c:	e8bd0800 	pop	{fp}</div><div class="line">  <span class="number">30</span>:	e12fff1e 	bx	lr</div></pre></td></tr></table></figure>

<p>可以看到指令长度都是32位的，说明gcc默认是以arm指令编译的。使用如下命令查找如何以Thumb编译。<br>]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在RaspberryPi上使用Ramdisk]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-ramdisk/"/>
    <id>http://www.nilennoct.com//raspberrypi-ramdisk/</id>
    <published>2013-03-19T05:37:56.000Z</published>
    <updated>2014-03-30T12:22:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
<p>RAM盘是通过使用软件将RAM模拟当做硬盘来使用的一种技术。相对于传统的硬盘文件访问来说，这种技术可以极大的提高在其上进行的文件访问的速度。新版B版的RPi内存达到了512MB，对于Raspbian来说是绰绰有余了。所以可以考虑把一部分RAM模拟成硬盘来加快存取速度。<br>Raspbian默认已经支持了Ramdisk，我们只需要格式化一个RamDisk，并将其mount到某一个目录上就可以了。</p>
</blockquote>
<p><strong>查看所有可用的ramdisk</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al /dev/ram*</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_25_01.png" alt="Task_25_01"></p>
<p><strong>创建Ramdisk</strong></p>
<p>一般是使用ext2文件系统格式化Ramdisk。而在此之前，即使/dev/目录中有ram*设备文件，他们也是不占空间，必须进行格式化之后才能使用。因为Ramdisk是临时性的，所以没有必要使用带日志的文件系统，所以一般用ext2格式化就可以了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> mke2fs /dev/ram0</div></pre></td></tr></table></figure>

<a id="more"></a>

<p>如下图所示，ram0已经成功被格式化了。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_25_02.png" alt="Task_25_02"></p>
<p><strong>挂载Ramdisk，查看结果</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> mount /dev/ram0 /var</div><div class="line">mount | grep ram</div><div class="line">df -h | grep ram</div></pre></td></tr></table></figure>

<p>如下图所示，ram0已经成功挂载在了/var目录上，大小为3.9M。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_25_03.png" alt="Task_25_03"></p>
<p>除此之外，也可以创建一个Ramdisk挂载在/tmp上，这样可以大大提高系统运行速度，而且每次重启都会自动清理/tmp目录，可谓一举两得了。</p>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
<p>RAM盘是通过使用软件将RAM模拟当做硬盘来使用的一种技术。相对于传统的硬盘文件访问来说，这种技术可以极大的提高在其上进行的文件访问的速度。新版B版的RPi内存达到了512MB，对于Raspbian来说是绰绰有余了。所以可以考虑把一部分RAM模拟成硬盘来加快存取速度。<br>Raspbian默认已经支持了Ramdisk，我们只需要格式化一个RamDisk，并将其mount到某一个目录上就可以了。</p>
</blockquote>
<p><strong>查看所有可用的ramdisk</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al /dev/ram*</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_25_01.png" alt="Task_25_01"></p>
<p><strong>创建Ramdisk</strong></p>
<p>一般是使用ext2文件系统格式化Ramdisk。而在此之前，即使/dev/目录中有ram*设备文件，他们也是不占空间，必须进行格式化之后才能使用。因为Ramdisk是临时性的，所以没有必要使用带日志的文件系统，所以一般用ext2格式化就可以了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> mke2fs /dev/ram0</div></pre></td></tr></table></figure>

]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建RaspberryPi的交叉编译环境]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-cross-compile/"/>
    <id>http://www.nilennoct.com//raspberrypi-cross-compile/</id>
    <published>2013-03-17T09:05:47.000Z</published>
    <updated>2014-03-30T12:22:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>安装交叉编译工具</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install gcc-arm-linux-gnueabi</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Lab_02_01.png" alt="Lab_02_01"></p>
<p><strong>编写测试程序hello.c并编译</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arm-linux-gnueabi-gcc hello.c</div></pre></td></tr></table></figure>

<p><a id="more"></a><br><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Lab_02_02.png" alt="Lab_02_02"></p>
<p><strong>通过scp命令上传编译好的文件到RPi</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp a.out pi@<span class="number">192.168</span>.<span class="number">0.4</span>:~/coding/c</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Lab_02_03.png" alt="Lab_02_03"></p>
<p>测试结果如下图所示。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Lab_02_04.png" alt="Lab_02_04"></p>
<ol>
<li>开启NFS服务</li>
</ol>
<p>每次上传文件都要用scp显然太麻烦了，所以可以开启NFS服务直接访问RPi。</p>
<p>在RPi上的NFS服务端添加/home/pi，重新启动nfs-kernel-server（详细方法见“<a href="http://www.nilennoct.com/raspberrypi-nas-chinese-encode-samba-sftp-dlna-nfs/" target="_blank" rel="external">RaspberryPi搭建NAS之中文兼容性检测</a>”第4部分）。</p>
<p>在ubuntu中执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">mkdir pi</div><div class="line"><span class="built_in">sudo</span> mount <span class="number">192.168</span>.<span class="number">0.4</span>:/home/pi /home/neo/pi</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Lab_02_05.png" alt="Lab_02_05"></p>
<ol>
<li>编写float.c并编译</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arm-linux-gnueabi-gcc -o float float.c</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Lab_02_06.png" alt="Lab_02_06"></p>
<p>在RPi上运行float查看运行结果。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Lab_02_07.png" alt="Lab_02_07"></p>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>安装交叉编译工具</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install gcc-arm-linux-gnueabi</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Lab_02_01.png" alt="Lab_02_01"></p>
<p><strong>编写测试程序hello.c并编译</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arm-linux-gnueabi-gcc hello.c</div></pre></td></tr></table></figure>

<p>]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在RaspberryPi上安装Ruby]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-install-ruby/"/>
    <id>http://www.nilennoct.com//raspberrypi-install-ruby/</id>
    <published>2013-03-10T03:14:53.000Z</published>
    <updated>2014-08-17T16:27:44.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>安装Ruby</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install ruby</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_13_01.png" alt="Task_13_01"></p>
<p><strong>安装ri文档查阅工具</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install ri</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_13_02.png" alt="Task_13_02"><br><a id="more"></a></p>
<p><strong>体验Ruby</strong></p>
<p>使用irb交互式环境。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">irb</div></pre></td></tr></table></figure>

<p>运行irb交互式环境后，即可开始ruby编程了。退出irb可以用Ctrl+D。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_13_03.png" alt="Task_13_03"></p>
<p>使用文件运行Ruby</p>
<p>新建一个文件hello.tb，输入以下内容。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> </span>h(name)</div><div class="line">	puts <span class="string">"Hello <span class="subst">#{name}</span>"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __FILE_<span class="number">_</span>==<span class="variable">$0</span></div><div class="line">	<span class="keyword">if</span> <span class="constant">ARGV</span>[<span class="number">0</span>] == <span class="keyword">nil</span></div><div class="line">		puts <span class="string">"Hello world!"</span></div><div class="line">	<span class="keyword">else</span></div><div class="line">		h(<span class="constant">ARGV</span>[<span class="number">0</span>])</div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>在命令行输入如下命令，查看结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ruby hello.rb</div><div class="line">ruby hello.rb Neo</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_13_04.png" alt="Task_13_04"></p>
<p>c) 使用ri查看文档。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># For example</span></div><div class="line">ri Array</div><div class="line">ri NilClass</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_13_05.png" alt="Task_13_05"></p>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>安装Ruby</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install ruby</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_13_01.png" alt="Task_13_01"></p>
<p><strong>安装ri文档查阅工具</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install ri</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_13_02.png" alt="Task_13_02"><br>]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu安装新版Dropbox的注意事项]]></title>
    <link href="http://www.nilennoct.com//ubuntu-install-new-version-dropbox-daemon-note/"/>
    <id>http://www.nilennoct.com//ubuntu-install-new-version-dropbox-daemon-note/</id>
    <published>2013-03-10T02:02:10.000Z</published>
    <updated>2014-03-30T12:22:05.000Z</updated>
    <content type="html"><![CDATA[<p>之前的ubuntu图方便是直接用wubi装的，结果前两天手贱把disk.img给误删了，无奈之下，干脆就重装了（可惜我配好的环境啊T T）。</p>
<p>分区、安装什么的都很顺利，PPA软件源我直接用Ubuntu Tweak管理了，确实很方便。不过在安装Dropbox的时候倒是遇到了一些麻烦。</p>
<p>Dropbox官网上提供的下载只不过是一个空壳而已，安装后需要使用如下命令安装daemon。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dropbox start -i</div></pre></td></tr></table></figure>

<p>但是由于国内某些特殊原因，需要下载的内容无法直接下载。而因为SSL证书的问题，使用goagent也无法安装。于是提取了<a href="https://dl-web.dropbox.com/u/17/dropbox-lnx.x86-1.6.17.tar.gz" target="_blank" rel="external">下载地址</a>通过浏览器直接下载到了安装包dropbox-lnx.x86-1.6.17.tar.gz。</p>
<p>按照以前的安装方式，直接解压到~目录，运行.dropbox-dist目录下的dropbox文件即可。不过这次的新版似乎有所不同，之前这样使用都可以开机自动运行，通过dropbox start命令也可以正常启动。但这次dropbox start却一直提示未安装，看来新版的dropbox daemon的安装还是有变化的= =<br><a id="more"></a></p>
<p>用编辑器直接打开/usr/bin/dropbox（这其实就是个python文件），可以看到以下内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">PARENT_DIR = os.path.expanduser(<span class="string">"/var/lib/dropbox"</span>)</div><div class="line">DROPBOXD_PATH = <span class="string">"%s/.dropbox-dist/dropboxd"</span> % PARENT_DIR</div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_dropbox</span><span class="params">()</span>:</span></div><div class="line">	db_path = os.path.expanduser(DROPBOXD_PATH).encode(sys.getfilesystemencoding())</div><div class="line">	<span class="keyword">if</span> os.access(db_path, os.X_OK):</div><div class="line">		f = open(<span class="string">"/dev/null"</span>, <span class="string">"w"</span>)</div><div class="line">		<span class="comment"># we don't reap the child because we're gonna die anyway, let init do it</span></div><div class="line">		a = subprocess.Popen([db_path], preexec_fn=os.setsid, cwd=os.path.expanduser(<span class="string">"~"</span>),</div><div class="line">							 stderr=sys.stderr, stdout=f, close_fds=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">		<span class="comment"># in seconds</span></div><div class="line">		interval = <span class="number">0.5</span></div><div class="line">		wait_for = <span class="number">60</span></div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> xrange(int(wait_for / interval)):</div><div class="line">			<span class="keyword">if</span> is_dropbox_running():</div><div class="line">				<span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">			<span class="comment"># back off from connect for a while</span></div><div class="line">			time.sleep(interval)</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line"><span class="decorator">@command</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(argv)</span>:</span></div><div class="line">	<span class="string">u"""start dropboxd</span></div><div class="line">dropbox start [-i]</div><div class="line"></div><div class="line">Starts the dropbox daemon, dropboxd. If dropboxd is already running, this will do nothing.</div><div class="line"></div><div class="line">options:</div><div class="line">  -i --install  auto install dropboxd if not available on the system</div><div class="line">"""</div><div class="line"></div><div class="line">	should_install = <span class="string">"-i"</span> <span class="keyword">in</span> argv <span class="keyword">or</span> <span class="string">"--install"</span> <span class="keyword">in</span> argv</div><div class="line"></div><div class="line">	<span class="comment"># first check if dropbox is already running</span></div><div class="line">	<span class="keyword">if</span> is_dropbox_running():</div><div class="line">		<span class="keyword">if</span> <span class="keyword">not</span> grab_link_url_if_necessary():</div><div class="line">			console_print(<span class="string">u"Dropbox is already running!"</span>)</div><div class="line">		<span class="keyword">return</span></div><div class="line"></div><div class="line">	console_print(<span class="string">u"Starting Dropbox..."</span>, linebreak=<span class="keyword">False</span>)</div><div class="line">	console_flush()</div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> start_dropbox():</div><div class="line">		<span class="keyword">if</span> <span class="keyword">not</span> should_install:</div><div class="line">			console_print()</div><div class="line">			console_print(<span class="string">u"The Dropbox daemon is not installed!"</span>)</div><div class="line">			console_print(<span class="string">u"""Run \"dropbox start -i\" to install the daemon"""</span>)</div><div class="line">			<span class="keyword">return</span></div><div class="line"></div><div class="line">		<span class="comment"># install dropbox!!!</span></div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			args = [ <span class="string">"pkexec"</span>, <span class="string">"dropbox"</span> ]</div><div class="line">			<span class="keyword">if</span> <span class="string">"http_proxy"</span> <span class="keyword">in</span> os.environ:</div><div class="line">				args.extend([<span class="string">"--http-proxy"</span>, os.environ[<span class="string">"http_proxy"</span>]])</div><div class="line">			args.append(<span class="string">"update"</span>)</div><div class="line">			status = os.spawnvp(os.P_WAIT, <span class="string">"pkexec"</span>, args)</div><div class="line">			<span class="keyword">if</span> status != <span class="number">0</span>:</div><div class="line">				console_print(<span class="string">u"The installation of Dropbox failed."</span>)</div><div class="line">				<span class="keyword">return</span></div><div class="line">		<span class="keyword">except</span>:</div><div class="line">			<span class="keyword">pass</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">if</span> GUI_AVAILABLE:</div><div class="line">				start_dropbox()</div><div class="line">				console_print(<span class="string">u"Done!"</span>)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">if</span> start_dropbox():</div><div class="line">					<span class="keyword">if</span> <span class="keyword">not</span> grab_link_url_if_necessary():</div><div class="line">						console_print(<span class="string">u"Done!"</span>)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">if</span> <span class="keyword">not</span> grab_link_url_if_necessary():</div><div class="line">			console_print(<span class="string">u"Done!"</span>)</div></pre></td></tr></table></figure>

<p>很容易发现这个dropbox daemon的安装位置已经改为了/var/lib/dropbox。将.dropbox-dist移过来，重新运行dropbox start，这下Dropbox就可以正常启动了，注销后重新登录也能自动启动了。</p>
]]></content>
    <summary type="html"><![CDATA[<p>之前的ubuntu图方便是直接用wubi装的，结果前两天手贱把disk.img给误删了，无奈之下，干脆就重装了（可惜我配好的环境啊T T）。</p>
<p>分区、安装什么的都很顺利，PPA软件源我直接用Ubuntu Tweak管理了，确实很方便。不过在安装Dropbox的时候倒是遇到了一些麻烦。</p>
<p>Dropbox官网上提供的下载只不过是一个空壳而已，安装后需要使用如下命令安装daemon。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dropbox start -i</div></pre></td></tr></table></figure>

<p>但是由于国内某些特殊原因，需要下载的内容无法直接下载。而因为SSL证书的问题，使用goagent也无法安装。于是提取了<a href="https://dl-web.dropbox.com/u/17/dropbox-lnx.x86-1.6.17.tar.gz" target="_blank" rel="external">下载地址</a>通过浏览器直接下载到了安装包dropbox-lnx.x86-1.6.17.tar.gz。</p>
<p>按照以前的安装方式，直接解压到~目录，运行.dropbox-dist目录下的dropbox文件即可。不过这次的新版似乎有所不同，之前这样使用都可以开机自动运行，通过dropbox start命令也可以正常启动。但这次dropbox start却一直提示未安装，看来新版的dropbox daemon的安装还是有变化的= =<br>]]></summary>
    
      <category term="Note" scheme="http://www.nilennoct.com/categories/Note/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在RaspberryPi上安装DHCP服务器]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-install-dhcp-server/"/>
    <id>http://www.nilennoct.com//raspberrypi-install-dhcp-server/</id>
    <published>2013-03-08T09:24:25.000Z</published>
    <updated>2014-08-17T16:27:44.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>确定DHCP服务端软件</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg --list | grep dhcp</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_11_01.png" alt="Task_11_01"></p>
<p>由图中可知道，RPi默认安装的dhcp客户端是isc-dhcp-client，不难想到对应的服务端应该是isc-dhcp-server。<br><a id="more"></a></p>
<p><strong>安装isc-dhcp-server</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install isc-dhcp-server</div></pre></td></tr></table></figure>

<p>如下图这样，安装完初次启动服务失败是正常的，因为此时尚未对其进行配置。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_11_02.png" alt="Task_11_02"></p>
<p><strong>配置DHCP服务器</strong></p>
<p>使用ifconfig命令，可以看到RPi只有eth0一个网卡，接下来就要把DHCP服务器绑定在eth0上。<br>编辑/etc/default/isc-dhcp-server文件，修改</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="constant">INTERFACES</span>=<span class="string">"eth0"</span></div></pre></td></tr></table></figure>

<p>编辑/etc/dhcp/dhcpd.conf文件，按如下内容修改</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">subnet <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> {</div><div class="line">	range <span class="number">192.168</span><span class="number">.0</span><span class="number">.100</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.254</span>;</div><div class="line">	<span class="keyword">option</span> domain-name-servers <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>; #Google的公共DNS</div><div class="line">	<span class="keyword">option</span> domain-name <span class="string">"Neo DHCP"</span>;</div><div class="line">	<span class="keyword">option</span> routers <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>;</div><div class="line">	<span class="keyword">option</span> broadcast-address <span class="number">192.168</span><span class="number">.0</span><span class="number">.255</span>;</div><div class="line">	<span class="keyword">default</span>-lease-<span class="built_in">time</span> <span class="number">600</span>;</div><div class="line">	max-lease-<span class="built_in">time</span> <span class="number">7200</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>启动DHCP服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> service isc-dhcp-server start</div></pre></td></tr></table></figure>

<p><strong>测试效果</strong></p>
<p>下图是笔记本尚未连接RPi时ifconfig的输出结果，注意eth0。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_11_03.png" alt="Task_11_03"></p>
<p>下图是笔记本连接了RPi后ifconfig的输出结果，可以看到eth0已经按我们配置的那样顺利获取到了IP。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_11_04.png" alt="Task_11_04"></p>
<p>至此RPi上DHCP的配置就告一段落了。</p>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>确定DHCP服务端软件</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg --list | grep dhcp</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_11_01.png" alt="Task_11_01"></p>
<p>由图中可知道，RPi默认安装的dhcp客户端是isc-dhcp-client，不难想到对应的服务端应该是isc-dhcp-server。<br>]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RaspberryPi搭建NAS之中文兼容性检测]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-nas-chinese-encode-samba-sftp-dlna-nfs/"/>
    <id>http://www.nilennoct.com//raspberrypi-nas-chinese-encode-samba-sftp-dlna-nfs/</id>
    <published>2013-03-07T10:00:55.000Z</published>
    <updated>2014-08-17T16:25:49.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
<p>在RPi上搭建NAS的过程详见《<a href="http://www.nilennoct.com/raspberrypi-nas-samba-sftp/" target="_blank" rel="external">在RaspberryPi上搭建NAS</a>》</p>
</blockquote>
<p>NAS已经搭建好了，接下来我们要测试一下各种方式对中文路径名、文件名的兼容情况。</p>
<p><strong>Samba</strong></p>
<p>如下图所示，是Win8下访问通过Samba方式访问RPi的效果。我们可以发现不需要多余的设置，中文已经很完美的显示了。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_09_01.png" alt="Task_09_01"><br><a id="more"></a></p>
<p>同样的，在iPad上可以正常显示。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/2013-03-07-10.32.53.png" alt="2013-03-07 10.32.53"></p>
<hr>
<p><strong>SFTP</strong></p>
<p>打开WinSCP，使用默认设置连接RPi，会发现中文全都变成了乱码，如下图。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_09_02.png" alt="Task_09_02"></p>
<p>解决的方法很简单，打开WinSCP的登录界面，若是已经存储了会话，先读取。点击左侧的“环境”，将右侧的“文件名UTF-8编码”改为开启，如下图所示。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_09_03.png" alt="Task_09_03"></p>
<p>重新连接，可以看到这下中文正常显示了（若是使用其他客户端，请寻找类似选项做类似的修改）。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_09_04.png" alt="Task_09_04"></p>
<hr>
<p><strong>DLNA</strong></p>
<p>在RPi上启动minidlna，在iPad上打开AcePlayer，选择Media Servers，会自动搜索局域网内的DLNA服务器。如下图所示。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/2013-03-07-11.33.35.png" alt="2013-03-07 11.33.35"></p>
<p>选择raspberry:minidlna，即可查看各种媒体文件，如下图。可以看到中文也正常显示了。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/2013-03-07-11.08.22.png" alt="2013-03-07 11.08.22"></p>
<hr>
<p><strong>NFS（之前的文章未提到该方法，在此作补充）</strong></p>
<p>首先安装NFS</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install nfs-kernel-server</div></pre></td></tr></table></figure>

<p>编辑/etc/exports文件，在最后添加以下内容。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/media/NAS *(rw,<span class="keyword">sync</span>,no_root_squash)</div></pre></td></tr></table></figure>

<p>启动rpcbind。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> update-rc.d rpcbind enable && update-rc.d nfs-common enable</div><div class="line"><span class="built_in">sudo</span> service rpcbind start</div></pre></td></tr></table></figure>

<p>重启nfs-kernel-server</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> service nfs-kernel-server restart</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_09_05.png" alt="Task_09_05"></p>
<p>进入ubuntu，打开终端，输入以下命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">mkdir nfs</div><div class="line"><span class="built_in">sudo</span> mount <span class="number">192.168</span>.<span class="number">0.4</span>:/media/NAS /home/neo/nfs</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_09_06.png" alt="Task_09_06"></p>
<p>可以看到通过NFS方式访问RPi也能正常的显示中文。</p>
<p>若出现如下错误提示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mount: wrong fs type, bad <span class="keyword">option</span>, bad superblock <span class="keyword">on</span> fs2:/data3,</div><div class="line">missing codepage <span class="keyword">or</span> helper program, <span class="keyword">or</span> other <span class="keyword">error</span></div><div class="line">(<span class="keyword">for</span> several filesystems (e.g. nfs, cifs) you might</div><div class="line">need a /sbin/mount. helper program)</div><div class="line"><span class="keyword">In</span> some cases useful info <span class="keyword">is</span> found <span class="keyword">in</span> syslog - <span class="keyword">try</span></div><div class="line">dmesg | tail <span class="keyword">or</span> so</div></pre></td></tr></table></figure>

<p>请执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install nfs-common</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
<p>在RPi上搭建NAS的过程详见《<a href="http://www.nilennoct.com/raspberrypi-nas-samba-sftp/" target="_blank" rel="external">在RaspberryPi上搭建NAS</a>》</p>
</blockquote>
<p>NAS已经搭建好了，接下来我们要测试一下各种方式对中文路径名、文件名的兼容情况。</p>
<p><strong>Samba</strong></p>
<p>如下图所示，是Win8下访问通过Samba方式访问RPi的效果。我们可以发现不需要多余的设置，中文已经很完美的显示了。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_09_01.png" alt="Task_09_01"><br>]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在RaspberryPi上启用AirPlay]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-airplay-shairport/"/>
    <id>http://www.nilennoct.com//raspberrypi-airplay-shairport/</id>
    <published>2013-03-05T14:56:35.000Z</published>
    <updated>2014-08-17T16:27:44.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>准备工作</strong></p>
<ul>
<li>连入局域网的Raspberry Pi（有线或无线均可）</li>
<li>迷你音箱一个</li>
<li>连入相同局域网内的iOS设备</li>
</ul>
<p><strong>更改缺省的音频输出端口</strong></p>
<p>将缺省的音频输出端口指向标准耳机端口而非原先的HDMI。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> amixer cset numid=<span class="number">3</span> <span class="number">1</span></div></pre></td></tr></table></figure>

<p><strong>安装shairport所需的包</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install git libao-dev libssl-dev libcrypt-openssl-rsa-perl libio-socket-inet6-perl libwww-perl avahi-utils libmodule-build-perl</div></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>安装Perl Net-SDP，主要用于兼容iOS6</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/njh/perl-net-sdp.git perl-net-sdp</div><div class="line"><span class="built_in">cd</span> perl-net-sdp</div><div class="line">perl Build.PL</div><div class="line"><span class="built_in">sudo</span> ./Build</div><div class="line"><span class="built_in">sudo</span> ./Build test</div><div class="line"><span class="built_in">sudo</span> ./Build install</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_08_01.png" alt="Task_08_01"></p>
<p><strong>安装shairport并启动服务</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/hendrikw82/shairport.git</div><div class="line"><span class="built_in">cd</span> shairport</div><div class="line"><span class="built_in">sudo</span> make</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_08_02.png" alt="Task_08_02"></p>
<p><strong>在RPi上开启shairport</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shairport.pl <span class="operator">-a</span> NeoAir</div></pre></td></tr></table></figure>

<p>其中NeoAi为Airport的服务名称，可以更具需要自行设置。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_08_03.png" alt="Task_08_03"></p>
<p><strong>测试</strong></p>
<p>打开iPad，在播放音乐时选择NeoAir，声音即在RPi上播放出来了。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_08_04.png" alt="Task_08_04"></p>
<p>实际使用过程中，初次播放时有比较大的噪音。断开重新连接AirPlay后声音恢复正常。</p>
<blockquote>
<p>本文内容参考 <a href="http://jordanburgess.com/post/38986434391/raspberry-pi-airplay" target="_blank" rel="external">Hacking a Raspberry Pi into a wireless airplay speaker</a></p>
</blockquote>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p><strong>准备工作</strong></p>
<ul>
<li>连入局域网的Raspberry Pi（有线或无线均可）</li>
<li>迷你音箱一个</li>
<li>连入相同局域网内的iOS设备</li>
</ul>
<p><strong>更改缺省的音频输出端口</strong></p>
<p>将缺省的音频输出端口指向标准耳机端口而非原先的HDMI。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> amixer cset numid=<span class="number">3</span> <span class="number">1</span></div></pre></td></tr></table></figure>

<p><strong>安装shairport所需的包</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install git libao-dev libssl-dev libcrypt-openssl-rsa-perl libio-socket-inet6-perl libwww-perl avahi-utils libmodule-build-perl</div></pre></td></tr></table></figure>

]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在RaspberryPi上搭建NAS]]></title>
    <link href="http://www.nilennoct.com//raspberrypi-nas-samba-sftp/"/>
    <id>http://www.nilennoct.com//raspberrypi-nas-samba-sftp/</id>
    <published>2013-03-05T07:08:18.000Z</published>
    <updated>2014-08-17T16:27:44.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p>给RPi连接上移动硬盘，可以很方便的将其变为NAS（Network Attached Storage）供远程使用。</p>
<p><strong>连接移动硬盘</strong></p>
<p>在连接移动硬盘时遇到了一点问题，就是RPi的USB输出功率太小，即使移动硬盘的数据口和供电口（在同一条USB线上）都插在RPi上也依然带不动移动硬盘。最后我把移动硬盘的供电口插在了笔记本上移动硬盘才能正常使用。</p>
<p>所在若是你在连接移动硬盘后无法在/dev目录中找到设备，请检查移动硬盘供电是否充足。</p>
<p>因为我是通过ssh连接RPi的，接上移动硬盘后RPi并没有自动挂载。输入如下命令挂载。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> mkdir /media/NAS</div><div class="line"><span class="built_in">sudo</span> mount -o uid=pi,gid=pi /dev/sda5 /media/NAS</div></pre></td></tr></table></figure>

<a id="more"></a>

<p>现在就可以在/media/NAS目录下看到移动硬盘中的内容了（为方便我只挂载了一个分区）。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_07_02.png" alt="Task_07_02"></p>
<p>从图上可以看到一个warning：“/media/NAS seems to be mounted read-only”。这是因为挂载的这个分区NTFS格式的。若要可读可写，可以安装ntfs-3g来实现。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install ntfs-<span class="number">3</span>g</div><div class="line"><span class="built_in">sudo</span> mount -t ntfs-<span class="number">3</span>g -o uid=pi,gid=pi /dev/sda5 /media/NAS</div></pre></td></tr></table></figure>

<p>若要实现开机自动挂载移动硬盘，可以修改/etc/fstab文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> vim /etc/fstab</div></pre></td></tr></table></figure>

<p>添加如下内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/dev/</span>sda5 <span class="regexp">/media/</span>NAS auto defaults,noexec,umask=<span class="number">0000</span> <span class="number">0</span> <span class="number">0</span></div></pre></td></tr></table></figure>

<p>然后重启即可。</p>
<hr>
<p><strong>通过Samba访问。</strong><br>Samba，是种用来让UNIX系列的操作系统与微软Windows操作系统的SMB/CIFS（Server Message Block/Common Internet File System）网络协定做连结的自由软件。目前的版本（v3）不仅可存取及分享SMB的资料夹及打印机，本身还可以整合入Windows Server的网域，扮演为网域控制站（Domain Controller）以及加入Active Directory成员。简而言之，此软件在Windows与UNIX系列OS之间搭起一座桥梁，让两者的资源可互通有无。<br>下面就来说说如何在RPi上安装并使用Samba。</p>
<ul>
<li>安装Samba，并把把系统默认用户 pi 添加到 samba</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install samba samba-common-bin</div><div class="line"><span class="built_in">sudo</span> smbpasswd <span class="operator">-a</span> pi</div></pre></td></tr></table></figure>

<ul>
<li>修改Samba的配置文件：/etc/samba/smb.conf，在最后加上以下内容</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[NAS]</div><div class="line"><span class="variable">comment =</span> NAS</div><div class="line"><span class="variable">public =</span> yes</div><div class="line"><span class="variable">path =</span> /media/NAS    <span class="comment"># 根据实际情况填写</span></div><div class="line">valid <span class="variable">users =</span> pi</div><div class="line">read <span class="variable">only =</span> no</div></pre></td></tr></table></figure>

<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_07_04.png" alt="Task_07_04"></p>
<ul>
<li>重启Samba服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> service samba restart</div></pre></td></tr></table></figure>

<ul>
<li>使用windows连接RPi</li>
</ul>
<p>按快捷键Win+R或者打开资源管理器，访问”\IP”，如下图所示。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_07_06.png" alt="Task_07_06"></p>
<p>根据提示输入用户名和密码（必须是使用sampasswd添加过的账户）登录，即可看到移动硬盘中的内容了。</p>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_07_09.png" alt="Task_07_09"></p>
<hr>
<p><strong>通过SFTP访问。</strong><br>SFTP（SSH File Transfer Protocol）是一种基于SSH的文件传输协议，透过SSH 2.0 的扩充提供安全档案传输能力。因为RPi默认已经开启了SSH，所以我们可以直接使用。</p>
<p>以WinSCP为例。</p>
<ul>
<li>打开WinSCP，点击右上角的新建按钮，填入服务器信息；</li>
</ul>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Unnamed-QQ-Screenshot20130301234118.png" alt=""></p>
<ul>
<li>输入完毕后点击保存，（可以选择保存密码），选择刚刚新建的会话，点击登录；</li>
</ul>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Unnamed-QQ-Screenshot20130301222639.png" alt=""></p>
<ul>
<li>定位到/media/NAS目录，即可查看到移动硬盘中的内容。</li>
</ul>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_07_12.png" alt="Task_07_12"></p>
<hr>
<p>通过DLNA访问。</p>
<ul>
<li>安装minidlna</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install minidlna</div></pre></td></tr></table></figure>

<ul>
<li>编辑minidlna的配置文件 /etc/minidlna.conf</li>
</ul>
<p>找到“media_dir”项，修改为移动硬盘的挂载点，比如我的/media/NAS。</p>
<ul>
<li>重启minidlna服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> service minidlna restart</div></pre></td></tr></table></figure>

<ul>
<li>在浏览器里输入”IP:8200”，查看服务器状态（8200为默认端口）。</li>
</ul>
<p><img src="http://img.nilennoct.com/wp-content/uploads/2013/03/Task_07_131.png" alt="Task_07_13"></p>
]]></content>
    <summary type="html"><![CDATA[<blockquote>
<p>浙江大学嵌入式系统课程</p>
</blockquote>
<p>给RPi连接上移动硬盘，可以很方便的将其变为NAS（Network Attached Storage）供远程使用。</p>
<p><strong>连接移动硬盘</strong></p>
<p>在连接移动硬盘时遇到了一点问题，就是RPi的USB输出功率太小，即使移动硬盘的数据口和供电口（在同一条USB线上）都插在RPi上也依然带不动移动硬盘。最后我把移动硬盘的供电口插在了笔记本上移动硬盘才能正常使用。</p>
<p>所在若是你在连接移动硬盘后无法在/dev目录中找到设备，请检查移动硬盘供电是否充足。</p>
<p>因为我是通过ssh连接RPi的，接上移动硬盘后RPi并没有自动挂载。输入如下命令挂载。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> mkdir /media/NAS</div><div class="line"><span class="built_in">sudo</span> mount -o uid=pi,gid=pi /dev/sda5 /media/NAS</div></pre></td></tr></table></figure>

]]></summary>
    
      <category term="RaspberryPi" scheme="http://www.nilennoct.com/categories/RaspberryPi/"/>
    
  </entry>
  
</feed>
