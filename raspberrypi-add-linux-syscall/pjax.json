{"title":"给RaspberryPi增加一个系统调用","url":"/raspberrypi-add-linux-syscall/","content":"<blockquote>\n<p>浙江大学嵌入式系统课程</p>\n</blockquote>\n<p><strong>安装交叉编译工具，并设置NAS</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">sudo</span> apt-get install gcc-arm-linux-gnueabi</div><div class=\"line\"><span class=\"built_in\">cd</span> ~</div><div class=\"line\">mkdir pi</div><div class=\"line\"><span class=\"built_in\">sudo</span> mount <span class=\"number\">192.168</span>.<span class=\"number\">0.4</span>:/home/pi /home/neo/pi</div></pre></td></tr></table></figure>\n\n<p>详情见<a href=\"http://www.nilennoct.com/raspberrypi-cross-compile/\" target=\"_blank\" rel=\"external\">搭建RaspberryPi的交叉编译环境</a>。</p>\n<p><strong>下载Raspberry Pi的源码</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># PC</span></div><div class=\"line\"><span class=\"built_in\">cd</span> ~/pi</div><div class=\"line\">mkdir kernel</div><div class=\"line\"><span class=\"built_in\">cd</span> kernel</div><div class=\"line\">git clone https://github.com/raspberrypi/linux.git</div><div class=\"line\">git clone https://github.com/raspberrypi/firmware.git</div></pre></td></tr></table></figure>\n\n<p>因为网络原因这一步耗时较长，需要耐心等待。也可以直接在github上下载zip压缩包自行解压，不过无论是使用RPi解压或是通过NAS解压速度都不快，可以考虑取下SD卡在PC上直接解压。<br><a id=\"more\"></a></p>\n<p><strong>提取原有的内核配置文件配置新内核</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># RPi</span></div><div class=\"line\">cd ~/kernel/linux</div><div class=\"line\">sudo zcat /<span class=\"keyword\">proc</span>/config.gz &gt; .config</div><div class=\"line\"><span class=\"comment\"># PC</span></div><div class=\"line\">make <span class=\"type\">ARCH</span>=arm <span class=\"type\">CROSS_COMPILE</span>=/usr/bin/arm-linux-gnueabi- oldconfig</div></pre></td></tr></table></figure>\n\n<p>因为不需要修改内核配置，直接一路回车结束配置即可。</p>\n<p><strong>增加新的系统调用</strong></p>\n<ul>\n<li>在linux/arch/arm/kernel/目录下新建mysyscall.c文件，输入以下内容</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;linux/kernel.h&gt;</span></div><div class=\"line\"><span class=\"keyword\">void</span> hello(<span class=\"keyword\">void</span>) {</div><div class=\"line\">\tprintk(<span class=\"string\">\"Hello world!\\tFrom Neo\\n\"</span>);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<ul>\n<li>在linux/arch/arm/kernel/call.S中添加新的系统调用，这里我替换的是原本为sys_ni_syscall的0x900000+223号系统调用，如下图所示。</li>\n</ul>\n<p><img src=\"http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_01.png\" alt=\"Lab_04_01\"></p>\n<ul>\n<li>修改arch/arm/kernel/目录下的Makeﬁle文件，在obj-y后面添加mysyscall.o，如下图。</li>\n</ul>\n<p><img src=\"http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_02.png\" alt=\"Lab_04_02\"></p>\n<p><strong>编译内核</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># PC</span></div><div class=\"line\">make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- -k</div></pre></td></tr></table></figure>\n\n<p>之所以选择交叉编译是因为RPi的主频和PC比起来相差太多，若是直接用RPi编译内核耗时太长了。</p>\n<p><strong>编译新lib</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># PC</span></div><div class=\"line\"><span class=\"built_in\">cd</span> ~/pi/kernel</div><div class=\"line\">mkdir modules</div><div class=\"line\"><span class=\"built_in\">cd</span> linux</div><div class=\"line\">make modules_install ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- INSTALL_MOD_PATH=../modules</div></pre></td></tr></table></figure>\n\n<p><strong>备份 firmware</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># RPi</span></div><div class=\"line\"><span class=\"built_in\">cd</span> ~/kernel</div><div class=\"line\">mkdir firmware_ori</div><div class=\"line\"><span class=\"built_in\">cd</span> /boot</div><div class=\"line\">cp *.elf *.bin ~/kernel/firmware_ori</div></pre></td></tr></table></figure>\n\n<p><strong>更新内核、lib和firmware</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># RPi</span></div><div class=\"line\"><span class=\"built_in\">cd</span> ~/kernel</div><div class=\"line\"><span class=\"built_in\">sudo</span> cp linux/arch/arm/boot/Image /boot/kernel_new.img</div><div class=\"line\"><span class=\"built_in\">sudo</span> cp modules/lib /</div><div class=\"line\"><span class=\"built_in\">cd</span> firmware/boot</div><div class=\"line\"><span class=\"built_in\">sudo</span> cp bootcode.bin fixup.dat fixup_cd.dat start.elf /boot</div></pre></td></tr></table></figure>\n\n<p><strong>修改RPi的配置文件/boot/config.txt</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># RPi</span></div><div class=\"line\"><span class=\"built_in\">sudo</span> nano /boot/config.txt</div></pre></td></tr></table></figure>\n\n<p>在首行加上“kernel=kernel_new.img”即可。若原来已经存在了kernel字段，直接修改就可以了。</p>\n<p><img src=\"http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_03.png\" alt=\"Lab_04_03\"></p>\n<p><strong>重启，测试新内核</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># RPi</span></div><div class=\"line\"><span class=\"built_in\">sudo</span> reboot</div></pre></td></tr></table></figure>\n\n<p>先看看原内核信息，如下图。</p>\n<p><img src=\"http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_04.png\" alt=\"Lab_04_04\"></p>\n<p>新内核信息如下图。</p>\n<p><img src=\"http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_05.png\" alt=\"Lab_04_05\"></p>\n<p>可以看到内核已经从3.2.27+升级到了3.6.11。</p>\n<p><strong>测试新增加的系统调用</strong></p>\n<ul>\n<li>编写测试文件hello.c，输入以下内容。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> sys_hello() {__asm__ __volatile__ (\"swi 0x900000+223\\n\\t\");} while(0)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">void</span>) {</div><div class=\"line\">\tsys_hello();</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Type \\\"dmesg | tail\\\" to see the result.\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<ul>\n<li>编译运行，查看结果。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># RPi</span></div><div class=\"line\">gcc hello.c -o hello</div><div class=\"line\">./hello</div><div class=\"line\">dmesg | tail</div></pre></td></tr></table></figure>\n\n<p>结果如下图。</p>\n<p><img src=\"http://img.nilennoct.com/wp-content/uploads/2013/04/Lab_04_06.png\" alt=\"Lab_04_06\"></p>\n<p>在内核信息的最后一行可以看到我们的hello()函数已经成功执行了。</p>\n","layout":"post"}