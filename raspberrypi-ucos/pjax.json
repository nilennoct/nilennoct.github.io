{"title":"Raspberry Pi上μC/OS II的移植","url":"/raspberrypi-ucos/","content":"<p><strong>下载μCOS II for Raspberry Pi源码，修改makefile文件</strong></p>\n<p>　　根据自己使用的交叉编译工具链，修改源码根目录下的<code>makefile</code>文件，主要修改的地方有如下两处：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">ARMGNU ?</span>= arm-linux-gnueabi</div><div class=\"line\"><span class=\"constant\"></span></div><div class=\"line\">INCLUDEPATH ?= <span class=\"string\">\"./h\"</span></div></pre></td></tr></table></figure>\n\n<p><strong>检查源码错误</strong></p>\n<p>　　不知道助教是不是有意“增加”实验难度，这次提供的源码中存在不少小错误，比如<code>makefile</code>文件的第59行的<code>ucos_bcm2835.elf</code>最后多了一个“.”、没有注意文件名大小写（这个与操作系统有关）等。这步可以通过执行<code>make</code>命令找出错误的地方，很快就能解决。<br><a id=\"more\"></a><br><strong>修改usrApp/userApp.c文件</strong></p>\n<p>　　这次实验的要求除了移植μCOS到RPi上以外，还要求实现两个任务的调度。这两个任务能轮流点亮LED，并通过串口发送消息表明自己正在运行。调度和通过串口发消息已经在提供的代码中实现了，主要要做的就是点亮LED了。</p>\n<p>　　这里我直接使用了RPi板子上LED即ACT灯，对应的GPIO号是16。代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"uart.h\"</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"ucos/includes.h\"</span></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> PUT32 ( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> GPSET0     0x2020001C</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> GPCLR0     0x20200028</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> userApp2(<span class=\"keyword\">void</span> * args) {</div><div class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">4</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) {</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">4</span>) {</div><div class=\"line\">\t\t\tPUT32(GPSET0, <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">16</span>); <span class=\"comment\">// 16是因为LED的GPIO地址为16.</span></div><div class=\"line\">\t\t\tcount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\tuart_string(<span class=\"string\">\"in userApp2\"</span>);</div><div class=\"line\">\t\tOSTimeDly(<span class=\"number\">100</span>);</div><div class=\"line\">\t\tcount++;</div><div class=\"line\">\t}</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> userApp1(<span class=\"keyword\">void</span> * args) {</div><div class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) {</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">6</span>) {</div><div class=\"line\">\t\t\tPUT32(GPCLR0, <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">16</span>);</div><div class=\"line\">\t\t\tcount = <span class=\"number\">2</span>;</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\tuart_string(<span class=\"string\">\"in userApp1\"</span>);</div><div class=\"line\">\t\tOSTimeDly(<span class=\"number\">100</span>);</div><div class=\"line\">\t\tcount++;</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>　　这里说明一下，之所以加入count变量是因为我发现，如果直接对GPIO设置电平值，LED会亮起很短的时间然后马上变暗，无法实现闪烁的效果。</p>\n<p><strong>替换kernel.img</strong></p>\n<p>　　编译内核并复制到SD卡中，上电开机，可以看到ACT灯开始闪烁了，同时在minicom中也能看到两个任务的输出信息。</p>\n<p><img src=\"http://img.nilennoct.com/wp-content/uploads/2013/05/Lab_06_01.png\" alt=\"Lab_06_01\"></p>\n","layout":"post"}